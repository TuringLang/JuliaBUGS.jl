module JuliaBUGS

using AbstractPPL
using BangBang
using Bijectors
using Distributions
using Graphs
using LogDensityProblems, LogDensityProblemsAD
using MacroTools
using MetaGraphsNext
using Random
using Setfield
using UnPack

using DynamicPPL: DynamicPPL, SimpleVarInfo

import Base: ==, hash, Symbol, size
import Distributions: truncated
import AbstractPPL: AbstractContext, evaluate!!

export @bugs
export compile

export @varname

# user defined functions and distributions are not supported yet
include("BUGSPrimitives/BUGSPrimitives.jl")
using .BUGSPrimitives

include("parser/Parser.jl")
using .Parser

include("utils.jl")
include("variable_types.jl")
include("compiler_pass.jl")
include("graphs.jl")
include("model.jl")
include("logdensityproblems.jl")

include("BUGSExamples/BUGSExamples.jl")

VAR_BIND_TYPE = Union{Real,AbstractArray{<:Real},AbstractArray{Union{<:Real,Missing}}}

function check_input(input::NamedTuple)
    for (k, v) in pairs(input)
        @assert v isa VAR_BIND_TYPE "Input $(k) has invalid type $(typeof(v)); expected Real, AbstractArray{<:Real}, or AbstractArray{Union{<:Real,Missing}}"
    end
end

"""
    compile(model_def[, data::NamedTuple, initializations::NamedTuple])

Compile a BUGS model into a log density problem.

# Arguments
- `model_def::Expr`: The BUGS model definition.
- `data::NamedTuple`: The data to be used in the model. If none is passed, the data will be assumed to be empty.
- `initializations::NamedTuple`: The initial values for the model parameters. If none is passed, the parameters will be assumed to be initialized to zero.
- `is_transformed::Bool=true`: If true, the model parameters during inference will be transformed to the unconstrained space. 

# Returns
- A [`BUGSModel`](@ref) object representing the compiled model.
"""
function compile(
    model_def::Expr,
    data::NamedTuple=NamedTuple(),
    inits::NamedTuple=NamedTuple();
    is_transformed::Bool=true,
)
    check_input(data)
    check_input(inits)
    scalars, array_sizes = program!(CollectVariables(), model_def, data)
    has_new_val, transformed_variables = program!(
        ConstantPropagation(scalars, array_sizes), model_def, data
    )
    while has_new_val
        has_new_val, transformed_variables = program!(
            ConstantPropagation(false, transformed_variables), model_def, data
        )
    end
    array_bitmap, transformed_variables = program!(
        PostChecking(data, transformed_variables), model_def, data
    )
    merged_data = merge_collections(deepcopy(data), transformed_variables, false)
    vars, array_sizes, array_bitmap, node_args, node_functions, dependencies = program!(
        NodeFunctions(array_sizes, array_bitmap), model_def, merged_data
    )
    g = BUGSGraph(vars, node_args, node_functions, dependencies)
    sorted_nodes = map(Base.Fix1(label_for, g), topological_sort(g))
    return BUGSModel(
        g,
        sorted_nodes,
        vars,
        array_sizes,
        merged_data,
        inits;
        is_transformed=is_transformed,
    )
end

"""
    @register_primitive(expr)

Currently, only function defined in the `BUGSPrimitives` module can be used in the model definition. 
This macro allows the user to register a user-defined function or distribution to be used in the model definition.

Example:
```julia
julia> @register_primitive function f(x) # function
    return x + 1
end

julia> JuliaBUGS.f(1)
2

julia> @register_primitive d(x) = Normal(0, x^2) # distribution

julia> JuliaBUGS.d(1)
Distributions.Normal{Float64}(μ=0.0, σ=1.0)
```
"""
macro register_primitive(expr)
    def = MacroTools.splitdef(expr)
    func_name = def[:name]
    func_expr = MacroTools.combinedef(def)
    return quote
        @eval JuliaBUGS begin
            # export $func_name
            $func_expr
        end
    end
end

"""
    @register_primitive(func)

`@register_primitive` can also be used to register function without definition.

Example
```julia
julia> f(x) = x + 1

julia> @register_primitive(f)

julia> JuliaBUGS.f(1)
2
```
"""
macro register_primitive(func::Symbol)
    return quote
        @eval JuliaBUGS begin
            $func = Main.$func
        end
    end
end
macro register_primitive(funcs::Vararg{Symbol})
    exprs = Expr(:block)
    for func in funcs
        push!(exprs.args, :($func = Main.$func))
    end
    return quote
        @eval JuliaBUGS begin
            $exprs
        end
    end
end

"""
    gen_chains

Generate a `Chains` object from the samples and statistics generated by `AbstractMCMC.sample`.
Only defined with `MCMCChains` extension.
"""
function gen_chains end

end
