name: Tests

on:
  push:
    branches:
      - main
  pull_request:

  workflow_dispatch:

jobs:
  test:
    name: Julia ${{ matrix.version }} on ${{ matrix.os }} (${{ matrix.arch }})
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.version == 'pre' }}
    strategy:
      matrix:
        version:
          - '1'
          # - 'min'
          # - 'pre'
        os:
          - ubuntu-latest
          # - windows-latest
        arch:
          - x64
        # include:
        #   - version: 'min'
        #     os: ubuntu-latest
        #     arch: x64
        #     coverage: true

    steps:
      - uses: actions/checkout@v4

      - uses: julia-actions/setup-julia@v2
        with:
          version: ${{ matrix.version }}
          arch: ${{ matrix.arch }}
      
      - uses: actions/cache@v4
        with:
          path: |
            ~/.julia
            ~/.julia/artifacts
          key: ${{ runner.os }}-julia-${{ matrix.version }}-${{ matrix.arch }}-${{ hashFiles('**/Project.toml', '**/Manifest.toml') }}
          restore-keys: |
            ${{ runner.os }}-julia-${{ matrix.version }}-${{ matrix.arch }}-
            ${{ runner.os }}-julia-${{ matrix.version }}-
      
      - uses: julia-actions/julia-buildpkg@v1

      - name: Running unit tests
        uses: julia-actions/julia-runtest@v1
        env:
          TEST_GROUP: "unit"

      - name: Running parser and macros tests
        uses: julia-actions/julia-runtest@v1
        env:
          TEST_GROUP: "parser and macros"

      - name: Running graphs tests
        uses: julia-actions/julia-runtest@v1
        env:
          TEST_GROUP: "graphs"

      - name: Running compilation tests
        uses: julia-actions/julia-runtest@v1
        env:
          TEST_GROUP: "compilation"

      - name: Running `log_density` tests
        uses: julia-actions/julia-runtest@v1
        env:
          TEST_GROUP: "log_density"

      # - name: Running `source_gen` tests
      #   uses: julia-actions/julia-runtest@v1
      #   env:
      #     TEST_GROUP: "source_gen"

      # - name: Running `gibbs` tests
      #   uses: nick-fields/retry@v3
      #   with:
      #     timeout_minutes: 10
      #     max_attempts: 3
      #     command: julia --color=yes --project=. -e "import Pkg; Pkg.instantiate(); Pkg.test(coverage=true);"
      #   env:
      #     TEST_GROUP: "gibbs"

      # - name: Running `mcmchains` tests
      #   uses: nick-fields/retry@v3
      #   with:
      #     timeout_minutes: 10
      #     max_attempts: 3
      #     command: julia --color=yes --project=. -e "import Pkg; Pkg.instantiate(); Pkg.test(coverage=true);"
      #   env:
      #     TEST_GROUP: "mcmchains"

      # - name: Running `experimental` tests
      #   uses: julia-actions/julia-runtest@v1
      #   env:
      #     TEST_GROUP: "experimental"
      
      # - uses: julia-actions/julia-processcoverage@v1
      #   if: matrix.coverage

      # - uses: codecov/codecov-action@v4
      #   if: matrix.coverage
      #   with:
      #     file: lcov.info
      
      # - uses: coverallsapp/github-action@master
      #   if: matrix.coverage
      #   with:
      #     github-token: ${{ secrets.GITHUB_TOKEN }}
      #     path-to-lcov: lcov.info
