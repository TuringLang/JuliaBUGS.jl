var documenterSearchIndex = {"docs":
[{"location":"api/api/#API","page":"General","title":"API","text":"","category":"section"},{"location":"api/api/","page":"General","title":"General","text":"@bugs\ncompile\ninitialize!","category":"page"},{"location":"api/api/#JuliaBUGS.Parser.@bugs","page":"General","title":"JuliaBUGS.Parser.@bugs","text":"@bugs(program::Expr)\n@bugs(program::String; replace_period::Bool=true, no_enclosure::Bool=false)\n\nConstructs a Julia Abstract Syntax Tree (AST) representation of a BUGS program. This macro supports two forms of input: a Julia expression or a string containing the BUGS program code. \n\nWhen provided with a string, the macro parses it as a BUGS program, with optional arguments to control parsing behavior.\nWhen given an expression, it performs syntactic checks to ensure compatibility with BUGS syntax.\n\nArguments for String Input\n\nFor the string input variant, the following optional arguments are available:\n\nreplace_period::Bool: When set to true, all periods (.) in the BUGS code are replaced. This is enabled by default.\nno_enclosure::Bool: When true, the parser does not require the BUGS program to be enclosed within model{ ... } brackets. By default, this is set to false.\n\n\n\n\n\n","category":"macro"},{"location":"api/api/#JuliaBUGS.compile","page":"General","title":"JuliaBUGS.compile","text":"compile(model_def, data[, initial_params])\n\nCompile the model with model definition and data. Optionally, initializations can be provided.  If initializations are not provided, values will be sampled from the prior distributions. \n\n\n\n\n\n","category":"function"},{"location":"api/api/#JuliaBUGS.initialize!","page":"General","title":"JuliaBUGS.initialize!","text":"initialize!(model::BUGSModel, initial_params::NamedTuple)\n\nInitialize the model with a NamedTuple of initial values, the values are expected to be in the original space.\n\n\n\n\n\ninitialize!(model::BUGSModel, initial_params::AbstractVector)\n\nInitialize the model with a vector of initial values, the values can be in transformed space if model.transformed is set to true.\n\n\n\n\n\n","category":"function"},{"location":"pitfalls/#Understanding-Pitfalls-in-Model-Definitions","page":"Pitfalls","title":"Understanding Pitfalls in Model Definitions","text":"","category":"section"},{"location":"pitfalls/#Consequence-of-Observations-on-Model-Parameters","page":"Pitfalls","title":"Consequence of Observations on Model Parameters","text":"","category":"section"},{"location":"pitfalls/","page":"Pitfalls","title":"Pitfalls","text":"When providing observations for the parameters of a model, the dependencies may become disrupted. Consider the following example written in Julia:","category":"page"},{"location":"pitfalls/","page":"Pitfalls","title":"Pitfalls","text":"model_def = @bugs begin\n    a ~ Normal(0, 1)\n    b ~ Normal(0, 1)\n    c ~ Normal(a, b)\nend\n\ndata = (a=1.0, b=2.0)","category":"page"},{"location":"pitfalls/","page":"Pitfalls","title":"Pitfalls","text":"In this scenario, the generated graph will lack the edges a -> c and b -> c, leading the node function of c to become c ~ Normal(1.0, 2.0).","category":"page"},{"location":"pitfalls/#Ambiguity-Between-Constants-and-Observations","page":"Pitfalls","title":"Ambiguity Between Constants and Observations","text":"","category":"section"},{"location":"pitfalls/","page":"Pitfalls","title":"Pitfalls","text":"A subtle and possibly contentious feature of BUGS syntax is that the observation value of a stochastic variable is treated identically to any model parameters supplied in the data. The following example is legal in BUGS if N is provided as data:","category":"page"},{"location":"pitfalls/","page":"Pitfalls","title":"Pitfalls","text":"model {\n    N ~ dcat(p[])\n    for (i in 1:N) {\n        y[i] ~ dnorm(mu, tau)\n    }\n    p[1] <- 0.5\n    p[2] <- 0.5\n}","category":"page"},{"location":"julia_syntax/#How-to-Specify-and-Create-a-BUGSModel","page":"How to Specify and Create a BUGSModel","title":"How to Specify and Create a BUGSModel","text":"","category":"section"},{"location":"julia_syntax/","page":"How to Specify and Create a BUGSModel","title":"How to Specify and Create a BUGSModel","text":"Creating a BUGSModel requires two key components: a BUGS program that defines the model structure and values for specific variables that parameterize the model.","category":"page"},{"location":"julia_syntax/","page":"How to Specify and Create a BUGSModel","title":"How to Specify and Create a BUGSModel","text":"To understand how to specify a model properly, it is important to distinguish between the different types of values you can provide to the JuliaBUGS compiler:","category":"page"},{"location":"julia_syntax/","page":"How to Specify and Create a BUGSModel","title":"How to Specify and Create a BUGSModel","text":"Constants: Values used in loop bounds and index resolution\nThese are essential for model specification as they determine the model's dimensionality (how many variables are created) and establish the dependency structure between variables\nIndependent variables (also called features, predictors, or covariates): Non-stochastic inputs required for forward simulation of the model\nExamples include predictor variables in a regression model or time points in a time series model\nObservations: Values for stochastic variables that you wish to condition on\nThese are not necessary to specify the model structure, but when provided, they become the data that your model is conditioned on\n(Note: In some advanced cases, stochastic variables can contribute to the log density without being part of a strictly generative model)\nInitialization values: Starting points for MCMC sampling\nWhile optional in many cases, some models (particularly those with weakly informative priors or complex structures) require carefully chosen initialization values for effective sampling","category":"page"},{"location":"julia_syntax/#Syntax-from-previous-BUGS-softwares-and-their-R-packages","page":"How to Specify and Create a BUGSModel","title":"Syntax from previous BUGS softwares and their R packages","text":"","category":"section"},{"location":"julia_syntax/","page":"How to Specify and Create a BUGSModel","title":"How to Specify and Create a BUGSModel","text":"Traditionally, BUGS models were created through a software interface following these steps:","category":"page"},{"location":"julia_syntax/","page":"How to Specify and Create a BUGSModel","title":"How to Specify and Create a BUGSModel","text":"Write the model in a text file\nCheck the model syntax (parsing)\nCompile the model with program text and data\nInitialize the sampling process (optional)","category":"page"},{"location":"julia_syntax/","page":"How to Specify and Create a BUGSModel","title":"How to Specify and Create a BUGSModel","text":"R interface packages for BUGS maintained this workflow pattern through text-based interfaces that closely mirrored the original software.","category":"page"},{"location":"julia_syntax/","page":"How to Specify and Create a BUGSModel","title":"How to Specify and Create a BUGSModel","text":"JuliaBUGS initially adopted this familiar workflow to accommodate users with prior BUGS experience. Specifically, JuliaBUGS provides a @bugs macro that accepts model definitions either as strings or within a begin...end block:","category":"page"},{"location":"julia_syntax/","page":"How to Specify and Create a BUGSModel","title":"How to Specify and Create a BUGSModel","text":"# Example using string macro\n@bugs\"\"\"\nmodel {\n    for( i in 1 : N ) {\n        r[i] ~ dbin(p[i],n[i])\n        b[i] ~ dnorm(0.0,tau)\n        logit(p[i]) <- alpha0 + alpha1 * x1[i] + alpha2 * x2[i] +\n        alpha12 * x1[i] * x2[i] + b[i]\n    }\n    alpha0 ~ dnorm(0.0,1.0E-6)\n    alpha1 ~ dnorm(0.0,1.0E-6)\n    alpha2 ~ dnorm(0.0,1.0E-6)\n    alpha12 ~ dnorm(0.0,1.0E-6)\n    tau ~ dgamma(0.001,0.001)\n    sigma <- 1 / sqrt(tau)\n}\n\"\"\"\n\n# Example using block macro\n@bugs begin\n    for i in 1:N\n        r[i] ~ dbin(p[i], n[i])\n        b[i] ~ dnorm(0.0, tau)\n        p[i] = logistic(alpha0 + alpha1 * x1[i] + alpha2 * x2[i] + alpha12 * x1[i] * x2[i] +\n                        b[i])\n    end\n    alpha0 ~ dnorm(0.0, 1.0e-6)\n    alpha1 ~ dnorm(0.0, 1.0e-6)\n    alpha2 ~ dnorm(0.0, 1.0e-6)\n    alpha12 ~ dnorm(0.0, 1.0e-6)\n    tau ~ dgamma(0.001, 0.001)\n    sigma = 1 / sqrt(tau)\nend","category":"page"},{"location":"julia_syntax/","page":"How to Specify and Create a BUGSModel","title":"How to Specify and Create a BUGSModel","text":"In both cases, the macro returns a Julia AST representation of the model. The compile function then takes this AST and user-provided values (as a NamedTuple) to create a BUGSModel instance.","category":"page"},{"location":"julia_syntax/","page":"How to Specify and Create a BUGSModel","title":"How to Specify and Create a BUGSModel","text":"While we maintain this interface for compatibility, we now also offer a more idiomatic Julia approach.","category":"page"},{"location":"julia_syntax/#The-Interface","page":"How to Specify and Create a BUGSModel","title":"The Interface","text":"","category":"section"},{"location":"julia_syntax/","page":"How to Specify and Create a BUGSModel","title":"How to Specify and Create a BUGSModel","text":"JuliaBUGS provides a Julian interface inspired by Turing.jl's model macro syntax. The @model macro creates a \"model creating function\" that returns a model object supporting operations like AbstractMCMC.sample (which samples MCMC chains) and condition (which modifies the model by incorporating observations).","category":"page"},{"location":"julia_syntax/#The-@model-Macro","page":"How to Specify and Create a BUGSModel","title":"The @model Macro","text":"","category":"section"},{"location":"julia_syntax/","page":"How to Specify and Create a BUGSModel","title":"How to Specify and Create a BUGSModel","text":"JuliaBUGS.@model function model_definition((;r, b, alpha0, alpha1, alpha2, alpha12, tau)::SeedsParams, x1, x2, N, n)    \n    for i in 1:N\n        r[i] ~ dbin(p[i], n[i])\n        b[i] ~ dnorm(0.0, tau)\n        p[i] = logistic(alpha0 + alpha1 * x1[i] + alpha2 * x2[i] + alpha12 * x1[i] * x2[i] + b[i])\n    end\n    alpha0 ~ dnorm(0.0, 1.0E-6)\n    alpha1 ~ dnorm(0.0, 1.0E-6)\n    alpha2 ~ dnorm(0.0, 1.0E-6)\n    alpha12 ~ dnorm(0.0, 1.0E-6)\n    tau ~ dgamma(0.001, 0.001)\n    sigma = 1 / sqrt(tau)\nend","category":"page"},{"location":"julia_syntax/","page":"How to Specify and Create a BUGSModel","title":"How to Specify and Create a BUGSModel","text":"The @model macro requires a specific function signature:","category":"page"},{"location":"julia_syntax/","page":"How to Specify and Create a BUGSModel","title":"How to Specify and Create a BUGSModel","text":"The first argument must declare stochastic parameters (variables defined with ~) using destructuring assignment with the format (; param1, param2, ...).\nWe recommend providing a type annotation (e.g., (; r, b, ...)::SeedsParams). If SeedsParams is defined using @parameters, the macro automatically defines a constructor SeedsParams(model::BUGSModel) for extracting parameter values from the model.\nAlternatively, you can use a NamedTuple instead of a custom type. In this case, no type annotation is needed, but you would need to manually create a NamedTuple with ParameterPlaceholder() values or arrays of missing values for parameters that don't have observations.\nThe remaining arguments must specify all constants and independent variables required by the model (variables used on the RHS but not on the LHS).","category":"page"},{"location":"julia_syntax/","page":"How to Specify and Create a BUGSModel","title":"How to Specify and Create a BUGSModel","text":"The @parameters macro simplifies creating structs to hold model parameters:","category":"page"},{"location":"julia_syntax/","page":"How to Specify and Create a BUGSModel","title":"How to Specify and Create a BUGSModel","text":"JuliaBUGS.@parameters struct SeedsParams\n    r\n    b\n    alpha0\n    alpha1\n    alpha2\n    alpha12\n    tau\nend","category":"page"},{"location":"julia_syntax/","page":"How to Specify and Create a BUGSModel","title":"How to Specify and Create a BUGSModel","text":"This macro applies Base.@kwdef to enable keyword initialization and creates a no-argument constructor. By default, fields are initialized to JuliaBUGS.ParameterPlaceholder. The concrete types and sizes of parameters are determined during compilation when the model function is called with constants. A constructor SeedsParams(::BUGSModel) is created for easy extraction of parameter values.","category":"page"},{"location":"julia_syntax/#Example","page":"How to Specify and Create a BUGSModel","title":"Example","text":"","category":"section"},{"location":"julia_syntax/","page":"How to Specify and Create a BUGSModel","title":"How to Specify and Create a BUGSModel","text":"julia> @model function seeds(\n        (; r, b, alpha0, alpha1, alpha2, alpha12, tau)::SeedsParams, x1, x2, N, n\n    )\n        for i in 1:N\n            r[i] ~ dbin(p[i], n[i])\n            b[i] ~ dnorm(0.0, tau)\n            p[i] = logistic(\n                alpha0 + alpha1 * x1[i] + alpha2 * x2[i] + alpha12 * x1[i] * x2[i] + b[i]\n            )\n        end\n        alpha0 ~ dnorm(0.0, 1.0E-6)\n        alpha1 ~ dnorm(0.0, 1.0E-6)\n        alpha2 ~ dnorm(0.0, 1.0E-6)\n        alpha12 ~ dnorm(0.0, 1.0E-6)\n        tau ~ dgamma(0.001, 0.001)\n        sigma = 1 / sqrt(tau)\n    end\nseeds (generic function with 1 method)\n\njulia> (; x1, x2, N, n) = JuliaBUGS.BUGSExamples.seeds.data; # extract data from existing BUGS example\n\njulia> @parameters struct SeedsParams\n        r\n        b\n        alpha0\n        alpha1\n        alpha2\n        alpha12\n        tau\n    end\n\njulia> m = seeds(SeedsParams(), x1, x2, N, n)\nBUGSModel (parameters are in transformed (unconstrained) space, with dimension 47):\n\n  Model parameters:\n    alpha2\n    b[21], b[20], b[19], b[18], b[17], b[16], b[15], b[14], b[13], b[12], b[11], b[10], b[9], b[8], b[7], b[6], b[5], b[4], b[3], b[2], b[1]\n    r[21], r[20], r[19], r[18], r[17], r[16], r[15], r[14], r[13], r[12], r[11], r[10], r[9], r[8], r[7], r[6], r[5], r[4], r[3], r[2], r[1]\n    tau\n    alpha12\n    alpha1\n    alpha0\n\n  Variable sizes and types:\n    b: size = (21,), type = Vector{Float64}\n    p: size = (21,), type = Vector{Float64}\n    n: size = (21,), type = Vector{Int64}\n    alpha2: type = Float64\n    sigma: type = Float64\n    alpha12: type = Float64\n    alpha0: type = Float64\n    N: type = Int64\n    tau: type = Float64\n    alpha1: type = Float64\n    r: size = (21,), type = Vector{Float64}\n    x1: size = (21,), type = Vector{Int64}\n    x2: size = (21,), type = Vector{Int64}\n\njulia> SeedsParams(m)\nSeedsParams:\n  r       = [0.0, 0.0, 0.0, 0.0, 39.0, 0.0, 0.0, 72.0, 0.0, 0.0  …  0.0, 0.0, 0.0, 0.0, 4.0, 12.0, 0.0, 0.0, 0.0, 0.0]\n  b       = [-Inf, -Inf, -Inf, -Inf, Inf, -Inf, -Inf, Inf, -Inf, -Inf  …  -Inf, -Inf, -Inf, -Inf, Inf, Inf, -Inf, -Inf, -Inf, -Inf]\n  alpha0  = -1423.52\n  alpha1  = 1981.99\n  alpha2  = -545.664\n  alpha12 = 1338.25\n  tau     = 0.0","category":"page"},{"location":"BUGS_notes/#Miscellaneous-Notes-on-BUGS","page":"Notes on BUGS Implementations","title":"Miscellaneous Notes on BUGS","text":"","category":"section"},{"location":"BUGS_notes/","page":"Notes on BUGS Implementations","title":"Notes on BUGS Implementations","text":"Here are some exert from BUGS Developer Manual and notes on the original BUGS implementations. ","category":"page"},{"location":"BUGS_notes/#Lexing","page":"Notes on BUGS Implementations","title":"Lexing","text":"","category":"section"},{"location":"BUGS_notes/","page":"Notes on BUGS Implementations","title":"Notes on BUGS Implementations","text":"The BUGS language has the convention that if a name is followed immediately by a round bracket, that is by a \"(\", then the names is a reserved name in the BUGS language and does not represent a variable in the model.\nBy scanning the stream of tokens that constitute a BUGS language model the names of all the variables in the model can be found.","category":"page"},{"location":"BUGS_notes/#Table-of-Names","page":"Notes on BUGS Implementations","title":"Table of Names","text":"","category":"section"},{"location":"BUGS_notes/","page":"Notes on BUGS Implementations","title":"Notes on BUGS Implementations","text":"The BUGS language compiler expands all the for loops in the model and records the value of the indices of each use of a tensor on the left hand side of each relation.\nThe range of each index, for a tensor, is set at the maximum value observed value of the index and added to the name table. There is one exception to this procedure for finding index bounds: names that are data, that is in the data source, have the ranges of their indices fixed in the data source.\nEach scalar and each component of a tensor used on the right hand side of a relation must occur either on the left hand side of a relation and or in a data source.","category":"page"},{"location":"BUGS_notes/#Data-Transformations","page":"Notes on BUGS Implementations","title":"Data Transformations","text":"","category":"section"},{"location":"BUGS_notes/","page":"Notes on BUGS Implementations","title":"Notes on BUGS Implementations","text":"If the compiler can prove that a logical assignment can be evaluated to a constant then the assignment is called a data transformation. This occurs if an assignment's right hand side does not depend on any variable quantities. The BUGS language has a general rule that there must only be one assignment statement for each scalar or component of a tensor.  This rule is slightly relaxed for data transformations. The language allows a logical assignment and a stochastic assignment to the same scalar or tensor component if and only if the logical assignment is a data transformation. ","category":"page"},{"location":"BUGS_notes/#Generated-Quantities","page":"Notes on BUGS Implementations","title":"Generated Quantities","text":"","category":"section"},{"location":"BUGS_notes/","page":"Notes on BUGS Implementations","title":"Notes on BUGS Implementations","text":"Only need to be evaluated after the inference algorithm has finished its task. ","category":"page"},{"location":"BUGS_notes/","page":"Notes on BUGS Implementations","title":"Notes on BUGS Implementations","text":"Generally, these are leaf nodes that logical variables\nIn the case of stochastic variables that are leaf nodes, do “forward sampling”, also part of the generated Quantities","category":"page"},{"location":"BUGS_notes/#Computation","page":"Notes on BUGS Implementations","title":"Computation","text":"","category":"section"},{"location":"BUGS_notes/","page":"Notes on BUGS Implementations","title":"Notes on BUGS Implementations","text":"All the nodes in the graphical model representing logical relations are placed into an","category":"page"},{"location":"BUGS_notes/","page":"Notes on BUGS Implementations","title":"Notes on BUGS Implementations","text":"array and sorted by their nesting level with the first array entries only depending on quantities defined by stochastic relations. Traversing this array and evaluating nodes gives up to date values to all logical relations.","category":"page"},{"location":"BUGS_notes/#Types","page":"Notes on BUGS Implementations","title":"Types","text":"","category":"section"},{"location":"BUGS_notes/","page":"Notes on BUGS Implementations","title":"Notes on BUGS Implementations","text":"The BUGS compiler uses the properties of the distribution on the right-hand side of a stochastic assignment statement to make deductions about the variable on the left-hand side. For example, r ~ dbin(p, n) implies that r is integer-valued, while x ~ dnorm(mu, tau) implies that x is real-valued.Some distributions are real-valued but have support on a restricted range of the reals. For example, p ~ dbeta(a, b) implies that p is real-valued with support on the unit interval, while x ~ dgamma(r, lambda) implies that x is real-valued but with support on the positive real line.There are two multivariate distributions in the BUGS language, the Dirichlet and the Wishart, that have support on a complex subspace of the reals. The Dirichlet has support on the unit simplex, while the Wishart has support on symmetric positive definite matrices.The BUGS compiler tries to infer if logical relations return an integer value by looking at whether their parents are integer-valued and the operators that combine the values of their parents into the return value. For example, in the cure model example above, the logical relation state1[i] <- state[i] + 1 is integer-valued because state[i] is a Bernoulli variable and therefore integer, the literal 1 is integer, and the sum of two integers is an integer.When the BUGS system reads in data from a data source, it can tag whether the number read is an integer or a real and propagate this information to logical relations. Again, using the cure model as an example, the statement t[i] <- x[i] + y[i] is integer-valued because both x and y are data and are given as integers in the data source.One special type of data is constants: that is just numbers with no associated distribution. Constants have many uses in BUGS language models, but one of the most important is as covariates. A model can contain a large number of constants that are used as covariates. Because of the possible large numbers of these covariate-type constants, they are given special treatment by the BUGS compiler. If a name read in from a data source is only used on the right-hand side of logical relations, no nodes in the graphical model are created to hold its values; they are directly incorporated in the objects that represent the right-hand sides of the logical relations.For example, the large Methadone model contains the regression:mu.indexed[i] <- beta[1] * x1[i] + beta[2] * x2[i] + beta[3] * x3[i] + beta[4] * x4[i] + region.effect[region.indexed[i]] + source.effect[region.indexed[i]] * source.indexed[i] + person.effect[person.indexed[i]]where i ranges from 1 to 240776. Not having to create a node in the graphical model to represent x1, x2, x3, x4, region.indexed, source.index, and person.indexed saves a large amount of space.In the BUGS language, the type information is fine-grained: each component of a tensor can have different type information. This is quite distinct from the situation in STAN and can make it much easier to specify a statistical model. One common case is where some components of a tensor have been observed while other components need to be estimated. The STAN documentation suggests workarounds for these situations, but these are somewhat complex.","category":"page"},{"location":"BUGS_notes/","page":"Notes on BUGS Implementations","title":"Notes on BUGS Implementations","text":"The type propagation is interesting and maybe useful. But we don’t necessarily need to implement a type system. A dirty way to get type information is simply do a dry run with some tricks.","category":"page"},{"location":"BUGS_notes/#Work-flow","page":"Notes on BUGS Implementations","title":"Work flow","text":"","category":"section"},{"location":"BUGS_notes/","page":"Notes on BUGS Implementations","title":"Notes on BUGS Implementations","text":"The statistical model and data are presented to the BUGS system in a series of stages. In the first stage the model text is parsed into a tree and the name table constructed. The data is then loaded and checked against the model. The data can be split over a number of source. Once all the data has been loaded the model is compiled. Compiling builds the graphical model and does a large number of checks on the consistency of the model. Finally initial values can be given or generated for the model.","category":"page"},{"location":"BUGS_notes/","page":"Notes on BUGS Implementations","title":"Notes on BUGS Implementations","text":"The compiler creates a node in the graphical model for each scalar name and each component of a tensor name in the BUGS language model. The compiler checks that only one node is created for each scalar name or component of a tensor name.","category":"page"},{"location":"BUGS_notes/","page":"Notes on BUGS Implementations","title":"Notes on BUGS Implementations","text":"Reading in a data source causes the compiler to create special nodes called constant nodes to hold the values of the data.","category":"page"},{"location":"BUGS_notes/","page":"Notes on BUGS Implementations","title":"Notes on BUGS Implementations","text":"The compiler processes logical relations before stochastic relations. Any logical relations that only have constant nodes on their right hand side become new constant nodes with the appropriate fixed value. Even if a logical relation can not be reduced to a constant some parts of the relation might be reduced to constants.","category":"page"},{"location":"BUGS_notes/","page":"Notes on BUGS Implementations","title":"Notes on BUGS Implementations","text":"Any constant nodes that have an associated stochastic relation become data nodes in the graphical model.","category":"page"},{"location":"BUGS_notes/#Logical-relations-in-the-BUGS-Language","page":"Notes on BUGS Implementations","title":"Logical relations in the BUGS Language","text":"","category":"section"},{"location":"BUGS_notes/","page":"Notes on BUGS Implementations","title":"Notes on BUGS Implementations","text":"The OpenBUGS software compiles a description of a statistical model in the BUGS language into a graph of objects. Each relation in the statistical model gives rise to a node in the graph of objects. Each distinct type of relation in the statistical model is represented by a node of a distinct class. For stochastic relations there is a fixed set of distributions that can be used in the modelling. For logical relations the situation is more complex. The software can use arbitrary logical expressions build out of a fixed set of basic operators and functions. For each distinct logical expression a new software source code module is written to implement a class to represent that logical expression in the graph of objects. The software module is then compiled using the Components Pascal compiler and the executable code merged into the running OpenBUGS software using the run time loading linker.The BUGS language description of a statistical model is parsed into a list of trees. The sub-trees that represent logical relations in the statistical model are first converted into a stack based representation and then into Component Pascal source code. The source code is generated in module BugsCPWrite and the source code is then compiled in module BugsCPCompiler. Usually the generated source code is not displayed. Checking the Verbose option in the Info menu will cause each each source code module generated by the OpenBUGS software to be displayed in a separate window.One advantage of a stack based representation of an expression is that it is straight forward to use it to derive source code that calculates the derivative of the expression with respect to its arguments. This part of the source code generation is carried out in module BugsCPWrite in procedure WriteEvaluateDiffMethod. Each operator in the stack representation of the logical expression causes a snippet of Component Pascal code to be written. These code snippets are generally very simple with those of binary operators slightly more complex than those of unitary operators. Each binary operators can emit three different code snippets: the general case and two special snippets depending on whether the left or right operands are numerical constants. The only complex code snippet is when an operand that is a logical relation in the statistical model is pushed onto the stack – the > case of nested logical relations. In this case the nested logical relation will have its own code to calculate derivatives and these values can be passed up the nesting level.The OpenBUGS software now uses a backward mode scheme to calculate the value of logical nodes in the statistical model. All the logical nodes in the statistical model are held in a global array and sorted according to their nesting level with unnested nodes at the start of the array. To evaluate all the logical nodes in the statistical model this array is then traversed and each logical node evaluated and the value stored in the node. The same scheme is used to calculate derivatives.The graphs derived from the BUGS language representation of statistical models are generally sparse. The OpenBUGS software uses conditional independence arguments to exploit sparsity in the stochastic parts of the model. There is also a sparsity structure in logical relations.Each logical relation will often depend on just a few stochastic parents and derivatives with respect to other stochastic nodes in the model will be structurally zero. Each logical node has an associated array of stochastic parents for which the derivatives are non zero. Moving up the level of nesting the number of parents can grow. Dealing with this issue leads to the complexity in the code snippet for the operator that pushes a logical node onto the stack. These issues can be seen in the non-linear random effects model called Orange trees in volume II of the OpenBUGS examples. In this model eta[i,] is a function of phi[i,1], phi[i,2] and phi[i,3] where the phi are also logical functions of the stochastic theta[i,].One refinement of the backward mode scheme used to calculate the value of logical nodes is to consider separately any logical nodes in the statistical model which are only used for prediction and do not affect the calculation of the joint probability distribution. These nodes need only be evaluated once per iteration of the inference algorithm. Examples of such nodes are sigma[k] and sigma.C in the Orange trees example. There is no need to evaluate the derivatives of these prediction nodes.The workings of the backward mode scheme are easy to visualize when the inference algorithm updates all the stochastic nodes in the statistical model in one block. Local versions of the backward mode scheme can be used when the inference algorithm works on single nodes or when a small blocks of nodes are updated. Each stochastic node is given its own vector of logical nodes that depend on it either directly or via other logical nodes and this vector is sorted by nesting level. Each updater that works on small blocks of nodes contains a vector of logical nodes which is the union of the vectors of dependent logical nodes for each of its components.The idea of the backward mode scheme for evaluating logical nodes can be used with caching in Metropolis Hastings sampling. First the vector of logical nodes depending on the relevant stochastic node(s) is evaluated and their values cached. The log of the conditional distribution is then calculated. Next a new value of the stochastic node is proposed. The vector of logical nodes is re-evaluated and the log of the > conditional distribution calculated. If the proposed value is rejected then the cache is used to set the vector of logical nodes back to its old values.The OpenBUGS software also calculates what class of function each logical node is in terms of its stochastic parents. If the software can prove for example that a logical node is a linear function of its parents more efficient sampling algorithms can be used. If a linear relation can be proved then the calculation of derivatives can also be optimized in some cases because they will be constant and so only need to be calculated once. Generalized linear models are implemented in a way that allows fast calculation of derivatives. The structure of the algorithm to classify the functional form of logical nodes is very similar to that for derivatives and uses a backward mode scheme","category":"page"},{"location":"BUGS_notes/","page":"Notes on BUGS Implementations","title":"Notes on BUGS Implementations","text":"BUGS separates management of logical and stochastic variables, essentially two graphs. Logical variables are stored in an array and values are updated with values in earlier positions of the array.","category":"page"},{"location":"api/functions/","page":"Functions","title":"Functions","text":"Most of the functions from BUGS have been implemented. ","category":"page"},{"location":"api/functions/","page":"Functions","title":"Functions","text":"JuliaBUGS directly utilizes functions from the Julia Standard Library when they share the same names and functionalities. For functions not available in the Julia Standard Library and other popular libraries, we have developed equivalents within JuliaBUGS.BUGSPrimitives.","category":"page"},{"location":"api/functions/#Function-defined-in-Julia-Standard-Library","page":"Functions","title":"Function defined in Julia Standard Library","text":"","category":"section"},{"location":"api/functions/","page":"Functions","title":"Functions","text":"warning: No keyword arguments syntax in BUGS\nPlease note that some functions listed may accept additional arguments (e.g. trunc) and/or keyword arguments (e.g. sum, sort, mean). However, at the moment JuliaBUGS only supports function arguments of type Real or AbstractArray{Real}. Furthermore, JuliaBUGS does not accommodate the use of keyword argument syntax. Thus, the default values for any optional or keyword arguments will be automatically applied.","category":"page"},{"location":"api/functions/","page":"Functions","title":"Functions","text":"abs\nexp(x::Real)\nlog(x::Number)\nsqrt(x::Real)\ntrunc\nmin(x::Real, y::Real)\nmax(x::Real, y::Real)\nsum(x::AbstractArray)\nsort(x::AbstractArray)\nsin(x::Real)\ncos(x::Real)\ntan(x::Real)\nasin(x::Real)\nacos(x::Real)\natan(x::Real)\nasinh(x::Real)\nacosh(x::Real)\natanh(x::Real)\nJuliaBUGS.BUGSPrimitives.mean(x::AbstractArray)","category":"page"},{"location":"api/functions/#Base.abs","page":"Functions","title":"Base.abs","text":"abs(x)\n\nThe absolute value of x.\n\nWhen abs is applied to signed integers, overflow may occur, resulting in the return of a negative value. This overflow occurs only when abs is applied to the minimum representable value of a signed integer. That is, when x == typemin(typeof(x)), abs(x) == x < 0, not -x as might be expected.\n\nSee also: abs2, unsigned, sign.\n\nExamples\n\njulia> abs(-3)\n3\n\njulia> abs(1 + im)\n1.4142135623730951\n\njulia> abs.(Int8[-128 -127 -126 0 126 127])  # overflow at typemin(Int8)\n1×6 Matrix{Int8}:\n -128  127  126  0  126  127\n\njulia> maximum(abs, [1, -2, 3, -4])\n4\n\n\n\n\n\n","category":"function"},{"location":"api/functions/#Base.exp-Tuple{Real}","page":"Functions","title":"Base.exp","text":"exp(x)\n\nCompute the natural base exponential of x, in other words ℯ^x.\n\nSee also exp2, exp10 and cis.\n\nExamples\n\njulia> exp(1.0)\n2.718281828459045\n\njulia> exp(im * pi) ≈ cis(pi)\ntrue\n\n\n\n\n\n","category":"method"},{"location":"api/functions/#Base.log-Tuple{Number}","page":"Functions","title":"Base.log","text":"log(x)\n\nCompute the natural logarithm of x.\n\nThrows DomainError for negative Real arguments. Use complex arguments to obtain complex results. Has a branch cut along the negative real axis, for which -0.0im is taken to be below the axis.\n\nSee also ℯ, log1p, log2, log10.\n\nExamples\n\njulia> log(2)\n0.6931471805599453\n\njulia> log(-3)\nERROR: DomainError with -3.0:\nlog was called with a negative real argument but will only return a complex result if called with a complex argument. Try log(Complex(x)).\nStacktrace:\n [1] throw_complex_domainerror(::Symbol, ::Float64) at ./math.jl:31\n[...]\n\njulia> log(-3 + 0im)\n1.0986122886681098 + 3.141592653589793im\n\njulia> log(-3 - 0.0im)\n1.0986122886681098 - 3.141592653589793im\n\njulia> log.(exp.(-1:1))\n3-element Vector{Float64}:\n -1.0\n  0.0\n  1.0\n\n\n\n\n\n","category":"method"},{"location":"api/functions/#Base.sqrt-Tuple{Real}","page":"Functions","title":"Base.sqrt","text":"sqrt(x)\n\nReturn sqrtx.\n\nThrows DomainError for negative Real arguments. Use complex negative arguments instead. Note that sqrt has a branch cut along the negative real axis.\n\nThe prefix operator √ is equivalent to sqrt.\n\nSee also: hypot.\n\nExamples\n\njulia> sqrt(big(81))\n9.0\n\njulia> sqrt(big(-81))\nERROR: DomainError with -81.0:\nNaN result for non-NaN input.\nStacktrace:\n [1] sqrt(::BigFloat) at ./mpfr.jl:501\n[...]\n\njulia> sqrt(big(complex(-81)))\n0.0 + 9.0im\n\njulia> sqrt(-81 - 0.0im)  # -0.0im is below the branch cut\n0.0 - 9.0im\n\njulia> .√(1:4)\n4-element Vector{Float64}:\n 1.0\n 1.4142135623730951\n 1.7320508075688772\n 2.0\n\n\n\n\n\n","category":"method"},{"location":"api/functions/#Base.trunc","page":"Functions","title":"Base.trunc","text":"trunc([T,] x)\ntrunc(x; digits::Integer= [, base = 10])\ntrunc(x; sigdigits::Integer= [, base = 10])\n\ntrunc(x) returns the nearest integral value of the same type as x whose absolute value is less than or equal to the absolute value of x.\n\ntrunc(T, x) converts the result to type T, throwing an InexactError if the truncated value is not representable a T.\n\nKeywords digits, sigdigits and base work as for round.\n\nTo support trunc for a new type, define Base.round(x::NewType, ::RoundingMode{:ToZero}).\n\nSee also: %, floor, unsigned, unsafe_trunc.\n\nExamples\n\njulia> trunc(2.22)\n2.0\n\njulia> trunc(-2.22, digits=1)\n-2.2\n\njulia> trunc(Int, -2.22)\n-2\n\n\n\n\n\n","category":"function"},{"location":"api/functions/#Base.min-Tuple{Real, Real}","page":"Functions","title":"Base.min","text":"min(x, y, ...)\n\nReturn the minimum of the arguments, with respect to isless. If any of the arguments is missing, return missing. See also the minimum function to take the minimum element from a collection.\n\nExamples\n\njulia> min(2, 5, 1)\n1\n\njulia> min(4, missing, 6)\nmissing\n\n\n\n\n\n","category":"method"},{"location":"api/functions/#Base.max-Tuple{Real, Real}","page":"Functions","title":"Base.max","text":"max(x, y, ...)\n\nReturn the maximum of the arguments, with respect to isless. If any of the arguments is missing, return missing. See also the maximum function to take the maximum element from a collection.\n\nExamples\n\njulia> max(2, 5, 1)\n5\n\njulia> max(5, missing, 6)\nmissing\n\n\n\n\n\n","category":"method"},{"location":"api/functions/#Base.sum-Tuple{AbstractArray}","page":"Functions","title":"Base.sum","text":"sum(A::AbstractArray; dims)\n\nSum elements of an array over the given dimensions.\n\nExamples\n\njulia> A = [1 2; 3 4]\n2×2 Matrix{Int64}:\n 1  2\n 3  4\n\njulia> sum(A, dims=1)\n1×2 Matrix{Int64}:\n 4  6\n\njulia> sum(A, dims=2)\n2×1 Matrix{Int64}:\n 3\n 7\n\n\n\n\n\n","category":"method"},{"location":"api/functions/#Base.sort-Tuple{AbstractArray}","page":"Functions","title":"Base.sort","text":"sort(A; dims::Integer, alg::Algorithm=defalg(A), lt=isless, by=identity, rev::Bool=false, order::Ordering=Forward)\n\nSort a multidimensional array A along the given dimension. See sort! for a description of possible keyword arguments.\n\nTo sort slices of an array, refer to sortslices.\n\nExamples\n\njulia> A = [4 3; 1 2]\n2×2 Matrix{Int64}:\n 4  3\n 1  2\n\njulia> sort(A, dims = 1)\n2×2 Matrix{Int64}:\n 1  2\n 4  3\n\njulia> sort(A, dims = 2)\n2×2 Matrix{Int64}:\n 3  4\n 1  2\n\n\n\n\n\n","category":"method"},{"location":"api/functions/#Base.sin-Tuple{Real}","page":"Functions","title":"Base.sin","text":"sin(x)\n\nCompute sine of x, where x is in radians.\n\nSee also sind, sinpi, sincos, cis, asin.\n\nExamples\n\njulia> round.(sin.(range(0, 2pi, length=9)'), digits=3)\n1×9 Matrix{Float64}:\n 0.0  0.707  1.0  0.707  0.0  -0.707  -1.0  -0.707  -0.0\n\njulia> sind(45)\n0.7071067811865476\n\njulia> sinpi(1/4)\n0.7071067811865475\n\njulia> round.(sincos(pi/6), digits=3)\n(0.5, 0.866)\n\njulia> round(cis(pi/6), digits=3)\n0.866 + 0.5im\n\njulia> round(exp(im*pi/6), digits=3)\n0.866 + 0.5im\n\n\n\n\n\n","category":"method"},{"location":"api/functions/#Base.cos-Tuple{Real}","page":"Functions","title":"Base.cos","text":"cos(x)\n\nCompute cosine of x, where x is in radians.\n\nSee also cosd, cospi, sincos, cis.\n\n\n\n\n\n","category":"method"},{"location":"api/functions/#Base.tan-Tuple{Real}","page":"Functions","title":"Base.tan","text":"tan(x)\n\nCompute tangent of x, where x is in radians.\n\n\n\n\n\n","category":"method"},{"location":"api/functions/#Base.asin-Tuple{Real}","page":"Functions","title":"Base.asin","text":"asin(x)\n\nCompute the inverse sine of x, where the output is in radians.\n\nSee also asind for output in degrees.\n\nExamples\n\njulia> asin.((0, 1/2, 1))\n(0.0, 0.5235987755982989, 1.5707963267948966)\n\njulia> asind.((0, 1/2, 1))\n(0.0, 30.000000000000004, 90.0)\n\n\n\n\n\n","category":"method"},{"location":"api/functions/#Base.acos-Tuple{Real}","page":"Functions","title":"Base.acos","text":"acos(x)\n\nCompute the inverse cosine of x, where the output is in radians\n\n\n\n\n\n","category":"method"},{"location":"api/functions/#Base.atan-Tuple{Real}","page":"Functions","title":"Base.atan","text":"atan(y)\natan(y, x)\n\nCompute the inverse tangent of y or y/x, respectively.\n\nFor one real argument, this is the angle in radians between the positive x-axis and the point (1, y), returning a value in the interval -pi2 pi2.\n\nFor two arguments, this is the angle in radians between the positive x-axis and the point (x, y), returning a value in the interval -pi pi. This corresponds to a standard atan2 function. Note that by convention atan(0.0,x) is defined as pi and atan(-0.0,x) is defined as -pi when x < 0.\n\nSee also atand for degrees.\n\nExamples\n\njulia> rad2deg(atan(-1/√3))\n-30.000000000000004\n\njulia> rad2deg(atan(-1, √3))\n-30.000000000000004\n\njulia> rad2deg(atan(1, -√3))\n150.0\n\n\n\n\n\n","category":"method"},{"location":"api/functions/#Base.asinh-Tuple{Real}","page":"Functions","title":"Base.asinh","text":"asinh(x)\n\nCompute the inverse hyperbolic sine of x.\n\n\n\n\n\n","category":"method"},{"location":"api/functions/#Base.acosh-Tuple{Real}","page":"Functions","title":"Base.acosh","text":"acosh(x)\n\nCompute the inverse hyperbolic cosine of x.\n\n\n\n\n\n","category":"method"},{"location":"api/functions/#Base.atanh-Tuple{Real}","page":"Functions","title":"Base.atanh","text":"atanh(x)\n\nCompute the inverse hyperbolic tangent of x.\n\n\n\n\n\n","category":"method"},{"location":"api/functions/#Statistics.mean-Tuple{AbstractArray}","page":"Functions","title":"Statistics.mean","text":"mean(A::AbstractArray; dims)\n\nCompute the mean of an array over the given dimensions.\n\ncompat: Julia 1.1\nmean for empty arrays requires at least Julia 1.1.\n\nExamples\n\njulia> using Statistics\n\njulia> A = [1 2; 3 4]\n2×2 Matrix{Int64}:\n 1  2\n 3  4\n\njulia> mean(A, dims=1)\n1×2 Matrix{Float64}:\n 2.0  3.0\n\njulia> mean(A, dims=2)\n2×1 Matrix{Float64}:\n 1.5\n 3.5\n\n\n\n\n\n","category":"method"},{"location":"api/functions/#Function-defined-in-[LogExpFunctions](https://github.com/JuliaStats/LogExpFunctions.jl)","page":"Functions","title":"Function defined in LogExpFunctions","text":"","category":"section"},{"location":"api/functions/","page":"Functions","title":"Functions","text":"cloglog\ncexpexp\nlogit\nlogistic","category":"page"},{"location":"api/functions/#LogExpFunctions.cloglog","page":"Functions","title":"LogExpFunctions.cloglog","text":"cloglog(x)\n\n\nCompute the complementary log-log, log(-log(1 - x)).\n\n\n\n\n\n","category":"function"},{"location":"api/functions/#LogExpFunctions.cexpexp","page":"Functions","title":"LogExpFunctions.cexpexp","text":"cexpexp(x)\n\n\nCompute the complementary double exponential, 1 - exp(-exp(x)).\n\n\n\n\n\n","category":"function"},{"location":"api/functions/#LogExpFunctions.logit","page":"Functions","title":"LogExpFunctions.logit","text":"logit(x)\n\n\nThe logit or log-odds transformation, defined as\n\noperatornamelogit(x) = logleft(fracx1-xright)\n\nfor 0  x  1.\n\nIts inverse is the logistic function.\n\n\n\n\n\n","category":"function"},{"location":"api/functions/#LogExpFunctions.logistic","page":"Functions","title":"LogExpFunctions.logistic","text":"logistic(x)\n\n\nThe logistic sigmoid function mapping a real number to a value in the interval 01,\n\nsigma(x) = frac1e^-x + 1 = frace^x1+e^x\n\nIts inverse is the logit function.\n\n\n\n\n\n","category":"function"},{"location":"api/functions/#Function-defined-in-JuliaBUGS.BUGSPrimitives","page":"Functions","title":"Function defined in JuliaBUGS.BUGSPrimitives","text":"","category":"section"},{"location":"api/functions/","page":"Functions","title":"Functions","text":"JuliaBUGS.BUGSPrimitives.equals\nJuliaBUGS.BUGSPrimitives.inprod\nJuliaBUGS.BUGSPrimitives.inverse\nJuliaBUGS.BUGSPrimitives.logdet\nJuliaBUGS.BUGSPrimitives.logfact\nJuliaBUGS.BUGSPrimitives.loggam\nJuliaBUGS.BUGSPrimitives.icloglog\nJuliaBUGS.BUGSPrimitives.mexp\nJuliaBUGS.BUGSPrimitives.phi\nJuliaBUGS.BUGSPrimitives.pow\nJuliaBUGS.BUGSPrimitives.rank\nJuliaBUGS.BUGSPrimitives.ranked\nJuliaBUGS.BUGSPrimitives.sd\nJuliaBUGS.BUGSPrimitives.softplus\nJuliaBUGS.BUGSPrimitives._step\nJuliaBUGS.BUGSPrimitives.arcsin\nJuliaBUGS.BUGSPrimitives.arcsinh\nJuliaBUGS.BUGSPrimitives.arccos\nJuliaBUGS.BUGSPrimitives.arccosh\nJuliaBUGS.BUGSPrimitives.arctan\nJuliaBUGS.BUGSPrimitives.arctanh","category":"page"},{"location":"api/functions/#JuliaBUGS.BUGSPrimitives.equals","page":"Functions","title":"JuliaBUGS.BUGSPrimitives.equals","text":"equals(x, y)\n\nReturns 1 if x is equal to y, 0 otherwise.\n\n\n\n\n\n","category":"function"},{"location":"api/functions/#JuliaBUGS.BUGSPrimitives.inprod","page":"Functions","title":"JuliaBUGS.BUGSPrimitives.inprod","text":"inprod(a, b)\n\nInner product of a and b.\n\n\n\n\n\n","category":"function"},{"location":"api/functions/#JuliaBUGS.BUGSPrimitives.inverse","page":"Functions","title":"JuliaBUGS.BUGSPrimitives.inverse","text":"inverse(m::AbstractMatrix)\n\nInverse of matrix mathbfm.\n\n\n\n\n\n","category":"function"},{"location":"api/functions/#JuliaBUGS.BUGSPrimitives.logdet","page":"Functions","title":"JuliaBUGS.BUGSPrimitives.logdet","text":"logdet(::AbstractMatrix)\n\nLogarithm of the determinant of matrix mathbfv.\n\n\n\n\n\n","category":"function"},{"location":"api/functions/#JuliaBUGS.BUGSPrimitives.logfact","page":"Functions","title":"JuliaBUGS.BUGSPrimitives.logfact","text":"logfact(x)\n\nLogarithm of the factorial of x.\n\n\n\n\n\n","category":"function"},{"location":"api/functions/#JuliaBUGS.BUGSPrimitives.loggam","page":"Functions","title":"JuliaBUGS.BUGSPrimitives.loggam","text":"loggam(x)\n\nLogarithm of the gamma function of x.\n\n\n\n\n\n","category":"function"},{"location":"api/functions/#JuliaBUGS.BUGSPrimitives.icloglog","page":"Functions","title":"JuliaBUGS.BUGSPrimitives.icloglog","text":"icloglog(x)\n\nInverse complementary log-log function of x. Alias for cexpexp(x).\n\n\n\n\n\n","category":"function"},{"location":"api/functions/#JuliaBUGS.BUGSPrimitives.mexp","page":"Functions","title":"JuliaBUGS.BUGSPrimitives.mexp","text":"mexp(x::AbstractMatrix)\n\nMatrix exponential of mathbfx.\n\n\n\n\n\n","category":"function"},{"location":"api/functions/#JuliaBUGS.BUGSPrimitives.phi","page":"Functions","title":"JuliaBUGS.BUGSPrimitives.phi","text":"phi(x)\n\nCumulative distribution function (CDF) of the standard normal distribution evaluated at x.\n\n\n\n\n\n","category":"function"},{"location":"api/functions/#JuliaBUGS.BUGSPrimitives.pow","page":"Functions","title":"JuliaBUGS.BUGSPrimitives.pow","text":"pow(a, b)\n\nReturn a raised to the power of b.\n\n\n\n\n\n","category":"function"},{"location":"api/functions/#JuliaBUGS.BUGSPrimitives.rank","page":"Functions","title":"JuliaBUGS.BUGSPrimitives.rank","text":"rank(v::AbstractVector, i::Integer)\n\nReturn the rank of the i-th element of mathbfv.\n\n\n\n\n\n","category":"function"},{"location":"api/functions/#JuliaBUGS.BUGSPrimitives.ranked","page":"Functions","title":"JuliaBUGS.BUGSPrimitives.ranked","text":"ranked(v::AbstractVector, i::Integer)\n\nReturn the i-th element of mathbfv sorted in ascending order.\n\n\n\n\n\n","category":"function"},{"location":"api/functions/#JuliaBUGS.BUGSPrimitives.sd","page":"Functions","title":"JuliaBUGS.BUGSPrimitives.sd","text":"sd(v::AbstractVector)\n\nReturn the standard deviation of the input vector mathbfv.\n\n\n\n\n\n","category":"function"},{"location":"api/functions/#JuliaBUGS.BUGSPrimitives.softplus","page":"Functions","title":"JuliaBUGS.BUGSPrimitives.softplus","text":"softplus(x)\n\nReturn the softplus function of x, defined as log(1 + exp(x)).\n\n\n\n\n\n","category":"function"},{"location":"api/functions/#JuliaBUGS.BUGSPrimitives._step","page":"Functions","title":"JuliaBUGS.BUGSPrimitives._step","text":"_step(x)\n\nReturn 1 if x is greater than 0, and 0 otherwise.\n\n\n\n\n\n","category":"function"},{"location":"api/functions/#JuliaBUGS.BUGSPrimitives.arcsin","page":"Functions","title":"JuliaBUGS.BUGSPrimitives.arcsin","text":"arcsin(x)\n\nSee asin.\n\n\n\n\n\n","category":"function"},{"location":"api/functions/#JuliaBUGS.BUGSPrimitives.arcsinh","page":"Functions","title":"JuliaBUGS.BUGSPrimitives.arcsinh","text":"arcsinh(x)\n\nSee asinh.\n\n\n\n\n\n","category":"function"},{"location":"api/functions/#JuliaBUGS.BUGSPrimitives.arccos","page":"Functions","title":"JuliaBUGS.BUGSPrimitives.arccos","text":"arccos(x)\n\nSee acos.\n\n\n\n\n\n","category":"function"},{"location":"api/functions/#JuliaBUGS.BUGSPrimitives.arccosh","page":"Functions","title":"JuliaBUGS.BUGSPrimitives.arccosh","text":"arccosh(x)\n\nSee acosh.\n\n\n\n\n\n","category":"function"},{"location":"api/functions/#JuliaBUGS.BUGSPrimitives.arctan","page":"Functions","title":"JuliaBUGS.BUGSPrimitives.arctan","text":"arctan(x)\n\nSee atan.\n\n\n\n\n\n","category":"function"},{"location":"api/functions/#JuliaBUGS.BUGSPrimitives.arctanh","page":"Functions","title":"JuliaBUGS.BUGSPrimitives.arctanh","text":"arctanh(x)\n\nSee atanh.\n\n\n\n\n\n","category":"function"},{"location":"differences/#Differences-From-Other-BUGS-Implementations","page":"Differences from Other BUGS Implementations","title":"Differences From Other BUGS Implementations","text":"","category":"section"},{"location":"differences/","page":"Differences from Other BUGS Implementations","title":"Differences from Other BUGS Implementations","text":"There exist many implementations of BUGS, notably WinBUGS, OpenBUGS, MultiBUGS, JAGS, and nimble.","category":"page"},{"location":"differences/","page":"Differences from Other BUGS Implementations","title":"Differences from Other BUGS Implementations","text":"This section aims to outline some differences between JuliaBUGS and other BUGS implementations. This comparison is not exhaustive, and we welcome any further discussion and reports on the matter.","category":"page"},{"location":"differences/#Use-of-generaic-function-in-distribution-functions","page":"Differences from Other BUGS Implementations","title":"Use of generaic function in distribution functions","text":"","category":"section"},{"location":"differences/","page":"Differences from Other BUGS Implementations","title":"Differences from Other BUGS Implementations","text":"In WinBUGS, OpenBUGS, and MultiBUGS, the arguments to distribution functions are typically restricted to variables or constants, not general expressions. JuliaBUGS, however, allows for more flexibility in these arguments.","category":"page"},{"location":"differences/","page":"Differences from Other BUGS Implementations","title":"Differences from Other BUGS Implementations","text":"For example, the following expressions are allowed in all BUGS implementations, including JuliaBUGS (assuming y = [1, 2, 3]):","category":"page"},{"location":"differences/","page":"Differences from Other BUGS Implementations","title":"Differences from Other BUGS Implementations","text":"model {\n x ~ dnorm(y[y[2]], 1)\n}\n\nmodel {\n  x ~ dnorm(y[y[2]+1], 1)\n}","category":"page"},{"location":"differences/","page":"Differences from Other BUGS Implementations","title":"Differences from Other BUGS Implementations","text":"However, JuliaBUGS allows more flexibility in these arguments. The following expressions, which are not allowed in traditional BUGS implementations, are permitted in JuliaBUGS:","category":"page"},{"location":"differences/","page":"Differences from Other BUGS Implementations","title":"Differences from Other BUGS Implementations","text":"model {\n x ~ dnorm(y[1] + 1, 1)\n}\n\nmodel {\n x ~ dnorm(sum(y[1:2]), 1)\n}\n\nmodel {\n x ~ dnorm(y[sum(y[1:2])], 1)\n}","category":"page"},{"location":"differences/#cumulative,-density,-and-deviance-Functions","page":"Differences from Other BUGS Implementations","title":"cumulative, density, and deviance Functions","text":"","category":"section"},{"location":"differences/","page":"Differences from Other BUGS Implementations","title":"Differences from Other BUGS Implementations","text":"In OpenBUGS, there are several functions for working with distributions:","category":"page"},{"location":"differences/","page":"Differences from Other BUGS Implementations","title":"Differences from Other BUGS Implementations","text":"cumulative(s1, s2): Computes the tail area (cumulative distribution function) of the distribution of s1 up to the value of s2. s1 must be a stochastic node, and s1 and s2 can be the same.\ndensity(s1, s2): Computes the density function of the distribution of s1 at the value of s2. s1 must be a stochastic node supplied as data, and s1 and s2 can be the same.\ndeviance(s1, s2): Computes the deviance of the distribution of s1 at the value of s2. s1 must be a stochastic node supplied as data, and s1 and s2 can be the same.","category":"page"},{"location":"differences/","page":"Differences from Other BUGS Implementations","title":"Differences from Other BUGS Implementations","text":"In MultiBUGS, these functions have been replaced with the cdf.dist, pdf.dist, and dev.dist family of functions.","category":"page"},{"location":"differences/","page":"Differences from Other BUGS Implementations","title":"Differences from Other BUGS Implementations","text":"In JuliaBUGS, we don't have these functions directly, but similar functionality can be achieved using the Distributions.jl package:","category":"page"},{"location":"differences/","page":"Differences from Other BUGS Implementations","title":"Differences from Other BUGS Implementations","text":"The cdf function computes the cumulative distribution function of a given univariate distribution at a specified value.\nThe pdf function computes the probability density function of a given univariate distribution at a specified value.\nJuliaBUGS does not currently support a deviance function equivalent to the one in OpenBUGS.","category":"page"},{"location":"differences/#Example","page":"Differences from Other BUGS Implementations","title":"Example","text":"","category":"section"},{"location":"differences/","page":"Differences from Other BUGS Implementations","title":"Differences from Other BUGS Implementations","text":"The cdf and pdf functions from the Distributions.jl are simple to use: the first argument is the distribution, and the second argument is the value at which to evaluate the function.","category":"page"},{"location":"differences/","page":"Differences from Other BUGS Implementations","title":"Differences from Other BUGS Implementations","text":"An OpenBUGS program like","category":"page"},{"location":"differences/","page":"Differences from Other BUGS Implementations","title":"Differences from Other BUGS Implementations","text":"model {\n    x ~ dnorm(0, 1)\n    cumulative.x = cumulative(x, x)\n}","category":"page"},{"location":"differences/","page":"Differences from Other BUGS Implementations","title":"Differences from Other BUGS Implementations","text":"will need to be rewritten to:","category":"page"},{"location":"differences/","page":"Differences from Other BUGS Implementations","title":"Differences from Other BUGS Implementations","text":"@bugs begin\n    x ~ Normal(0, 1)\n    cumulative_x = cdf(Normal(0, 1), x)\nend","category":"page"},{"location":"differences/#Use-:-for-slicing-when-using-Julia-Syntax","page":"Differences from Other BUGS Implementations","title":"Use : for slicing when using Julia Syntax","text":"","category":"section"},{"location":"differences/","page":"Differences from Other BUGS Implementations","title":"Differences from Other BUGS Implementations","text":"In the original BUGS language, slicing is performed using syntax like x[, ], which selects all elements from both the first and second dimensions.","category":"page"},{"location":"differences/","page":"Differences from Other BUGS Implementations","title":"Differences from Other BUGS Implementations","text":"The @bugs macro will automatically insert a : when given x[], however, Julia parser will throw an error if it encounters x[, ], so when using the @bugs macro in JuliaBUGS, users must explicitly use the Colon (:) operator for slicing. For example, to select all elements from both dimensions of an array x, you would write x[:, :].","category":"page"},{"location":"differences/#Link-functions","page":"Differences from Other BUGS Implementations","title":"Link functions","text":"","category":"section"},{"location":"differences/","page":"Differences from Other BUGS Implementations","title":"Differences from Other BUGS Implementations","text":"BUGS supports four link functions: log, logit, cloglog, and probit. These functions are used to support Generalized Linear Models and, in some cases, to transform random variables with constrained support to the real line.","category":"page"},{"location":"differences/","page":"Differences from Other BUGS Implementations","title":"Differences from Other BUGS Implementations","text":"For instance, the Seeds example features logistic regression, and the model definition is","category":"page"},{"location":"differences/","page":"Differences from Other BUGS Implementations","title":"Differences from Other BUGS Implementations","text":"model\n{\n    for( i in 1 : N ) {\n        r[i] ~ dbin(p[i],n[i])\n        beta[i] ~ dnorm(0.0,tau)\n        logit(p[i]) <- alpha0 + alpha1 * x1[i] + alpha2 * x2[i] + alpha12 * x1[i] * x2[i] + beta[i]\n    }\n    alpha0 ~ dnorm(0.0,1.0E-6)\n    alpha1 ~ dnorm(0.0,1.0E-6)\n    alpha2 ~ dnorm(0.0,1.0E-6)\n    alpha12 ~ dnorm(0.0,1.0E-6)\n    sigma ~ dunif(0,10)\n    tau <- 1 / pow(sigma, 2)\n}","category":"page"},{"location":"differences/","page":"Differences from Other BUGS Implementations","title":"Differences from Other BUGS Implementations","text":"JuliaBUGS inherits these functions, but it's important to note that the link function syntax is not supported when using the Julia-like syntax. The reason for this is that Julia uses the syntax f(...) = ... to define functions, and the link function syntax can be confusing in the Julia context.","category":"page"},{"location":"differences/","page":"Differences from Other BUGS Implementations","title":"Differences from Other BUGS Implementations","text":"Instead, users are advised to use the inverse functions of these link functions by calling them on the right-hand side (RHS) of the statement. The inverse functions are:","category":"page"},{"location":"differences/","page":"Differences from Other BUGS Implementations","title":"Differences from Other BUGS Implementations","text":"log → exp\nlogit → logistic\ncloglog → cloglog\nprobit → probit","category":"page"},{"location":"differences/","page":"Differences from Other BUGS Implementations","title":"Differences from Other BUGS Implementations","text":"So the above model should be rewritten as","category":"page"},{"location":"differences/","page":"Differences from Other BUGS Implementations","title":"Differences from Other BUGS Implementations","text":"@bugs begin\n    for i in 1:N\n        r[i] ~ dbin(p[i], n[i])\n        b[i] ~ dnorm(0.0, tau)\n        p[i] = logistic(alpha0 + alpha1 * x1[i] + alpha2 * x2[i] + alpha12 * x1[i] * x2[i] + b[i])\n    end\n    alpha0 ~ dnorm(0.0, 1.0e-6)\n    alpha1 ~ dnorm(0.0, 1.0e-6)\n    alpha2 ~ dnorm(0.0, 1.0e-6)\n    alpha12 ~ dnorm(0.0, 1.0e-6)\n    tau ~ dgamma(0.001, 0.001)\n    sigma = 1 / sqrt(tau)\nend","category":"page"},{"location":"differences/","page":"Differences from Other BUGS Implementations","title":"Differences from Other BUGS Implementations","text":"(When the program is in the original BUGS syntax, the link function syntax is supported.)","category":"page"},{"location":"differences/","page":"Differences from Other BUGS Implementations","title":"Differences from Other BUGS Implementations","text":"It's also worth noting that JuliaBUGS uses Bijectors.jl to handle constrained parameters.","category":"page"},{"location":"differences/#Compare-with-nimble","page":"Differences from Other BUGS Implementations","title":"Compare with nimble","text":"","category":"section"},{"location":"differences/","page":"Differences from Other BUGS Implementations","title":"Differences from Other BUGS Implementations","text":"In the BUGS language, link functions are only supported in logical assignments. However, nimble extends this functionality by allowing link functions to be used in stochastic assignments as well. nimble will creates new node as intermediate variables. JuliaBUGS doesn't currently support this syntax.","category":"page"},{"location":"api/distributions/","page":"Distributions","title":"Distributions","text":"dnorm\ndlogis\ndt\nTDistShiftedScaled\nddexp\ndflat\nFlat\nTruncatedFlat\ndexp\ndchisqr\ndweib\ndlnorm\ndgamma\ndpar\ndgev\ndgpar\ndf\ndunif\ndbeta\ndmnorm\ndmt\ndwish\nddirich\ndbern\ndbin\ndcat\ndpois\ndgeom\ndnegbin\ndbetabin\ndhyper\ndmulti","category":"page"},{"location":"api/distributions/#JuliaBUGS.BUGSPrimitives.dnorm","page":"Distributions","title":"JuliaBUGS.BUGSPrimitives.dnorm","text":"dnorm(μ, τ)\n\nReturns an instance of Normal  with mean μ and standard deviation frac1τ. \n\np(xμτ) = sqrtfracτ2π e^-τ frac(x-μ)^22\n\n\n\n\n\n","category":"function"},{"location":"api/distributions/#JuliaBUGS.BUGSPrimitives.dlogis","page":"Distributions","title":"JuliaBUGS.BUGSPrimitives.dlogis","text":"dlogis(μ, τ)\n\nReturn an instance of Logistic  with location parameter μ and scale parameter frac1τ.\n\np(xμτ) = fracsqrtτ e^-sqrtτ(x-μ)(1+e^-sqrtτ(x-μ))^2\n\n\n\n\n\n","category":"function"},{"location":"api/distributions/#JuliaBUGS.BUGSPrimitives.dt","page":"Distributions","title":"JuliaBUGS.BUGSPrimitives.dt","text":"dt(μ, τ, ν)\n\nIf μ = 0 and σ = 1, the function returns an instance of TDist  with ν degrees of freedom, location μ, and scale σ = frac1sqrtτ. Otherwise, it returns an instance of TDistShiftedScaled.\n\np(xνμσ) = fracΓ((ν+1)2)Γ(ν2) sqrtνπσ\nleft(1+frac1νleft(fracx-μσright)^2right)^-fracν+12\n\n\n\n\n\n","category":"function"},{"location":"api/distributions/#JuliaBUGS.BUGSPrimitives.TDistShiftedScaled","page":"Distributions","title":"JuliaBUGS.BUGSPrimitives.TDistShiftedScaled","text":"TDistShiftedScaled(ν, μ, σ)\n\nStudent's t-distribution with ν degrees of freedom, location μ, and scale σ. \n\nThis struct allows for a shift (determined by μ) and a scale (determined by σ) of the standard  Student's t-distribution provided by the Distributions.jl  package. \n\nOnly pdf and logpdf are implemented for this distribution.\n\nSee Also\n\nTDist\n\n\n\n\n\n","category":"type"},{"location":"api/distributions/#JuliaBUGS.BUGSPrimitives.ddexp","page":"Distributions","title":"JuliaBUGS.BUGSPrimitives.ddexp","text":"ddexp(μ, τ)\n\nReturn an instance of Laplace (Double Exponential)  with location μ and scale frac1sqrtτ.\n\np(xμτ) = fracsqrtτ2 e^-sqrtτ x-μ\n\n\n\n\n\n","category":"function"},{"location":"api/distributions/#JuliaBUGS.BUGSPrimitives.dflat","page":"Distributions","title":"JuliaBUGS.BUGSPrimitives.dflat","text":"dflat()\n\nReturns an instance of Flat or TruncatedFlat if truncated.\n\nFlat represents a flat (uniform) prior over the real line, which is an improper distribution. And  TruncatedFlat represents a truncated version of the Flat distribution.\n\nOnly pdf, logpdf, minimum, and maximum are implemented for these Distributions.\n\nWhen use in a model, the parameters always need to be initialized.\n\n\n\n\n\n","category":"function"},{"location":"api/distributions/#JuliaBUGS.BUGSPrimitives.Flat","page":"Distributions","title":"JuliaBUGS.BUGSPrimitives.Flat","text":"Flat\n\nThe flat distribution mimicking the behavior of the dflat distribution in the BUGS family of softwares.\n\n\n\n\n\n","category":"type"},{"location":"api/distributions/#JuliaBUGS.BUGSPrimitives.TruncatedFlat","page":"Distributions","title":"JuliaBUGS.BUGSPrimitives.TruncatedFlat","text":"TruncatedFlat\n\nTruncated version of the Flat distribution.\n\n\n\n\n\n","category":"type"},{"location":"api/distributions/#JuliaBUGS.BUGSPrimitives.dexp","page":"Distributions","title":"JuliaBUGS.BUGSPrimitives.dexp","text":"dexp(λ)\n\nReturns an instance of Exponential  with rate frac1λ.\n\np(xλ) = λ e^-λ x\n\n\n\n\n\n","category":"function"},{"location":"api/distributions/#JuliaBUGS.BUGSPrimitives.dchisqr","page":"Distributions","title":"JuliaBUGS.BUGSPrimitives.dchisqr","text":"dchisqr(k)\n\nReturns an instance of Chi-squared  with k degrees of freedom.\n\np(xk) = frac12^k2 Γ(k2) x^k2 - 1 e^-x2\n\n\n\n\n\n","category":"function"},{"location":"api/distributions/#JuliaBUGS.BUGSPrimitives.dweib","page":"Distributions","title":"JuliaBUGS.BUGSPrimitives.dweib","text":"dweib(a, b)\n\nReturns an instance of Weibull  distribution object with shape parameter a and scale parameter frac1b.\n\nThe Weibull distribution is a common model for event times. The hazard or instantaneous risk of the event  is abx^a-1. For a  1 the hazard decreases with x; for a  1 it increases.  a = 1 results in the exponential distribution with constant hazard.\n\np(xab) = abx^a-1e^-b x^a\n\n\n\n\n\n","category":"function"},{"location":"api/distributions/#JuliaBUGS.BUGSPrimitives.dlnorm","page":"Distributions","title":"JuliaBUGS.BUGSPrimitives.dlnorm","text":"dlnorm(μ, τ)\n\nReturns an instance of LogNormal  with location μ and scale frac1sqrtτ.\n\np(xμτ) = fracsqrtτxsqrt2π e^-τ2 (log(x) - μ)^2\n\n\n\n\n\n","category":"function"},{"location":"api/distributions/#JuliaBUGS.BUGSPrimitives.dgamma","page":"Distributions","title":"JuliaBUGS.BUGSPrimitives.dgamma","text":"dgamma(a, b)\n\nReturns an instance of Gamma  with shape a and scale frac1b.\n\np(xab) = fracb^aΓ(a) x^a-1 e^-bx\n\n\n\n\n\n","category":"function"},{"location":"api/distributions/#JuliaBUGS.BUGSPrimitives.dpar","page":"Distributions","title":"JuliaBUGS.BUGSPrimitives.dpar","text":"dpar(a, b)\n\nReturns an instance of Pareto  with scale parameter b and shape parameter a.\n\np(xab) = fraca b^ax^a+1\n\n\n\n\n\n","category":"function"},{"location":"api/distributions/#JuliaBUGS.BUGSPrimitives.dgev","page":"Distributions","title":"JuliaBUGS.BUGSPrimitives.dgev","text":"dgev(μ, σ, η)\n\nReturns an instance of GeneralizedExtremeValue  with location μ, scale σ, and shape η.\n\np(xμση) = frac1σ left(1 + η fracx - μσright)^-frac1η - 1 e^-left(1 + η fracx - μσright)^-frac1η\n\nwhere fracη(x - μ)σ  -1.\n\n\n\n\n\n","category":"function"},{"location":"api/distributions/#JuliaBUGS.BUGSPrimitives.dgpar","page":"Distributions","title":"JuliaBUGS.BUGSPrimitives.dgpar","text":"dgpar(μ, σ, η)\n\nReturns an instance of GeneralizedPareto  with location μ, scale σ, and shape η.\n\np(xμση) = frac1σ (1 + η ((x - μ)σ))^-1η - 1\n\n\n\n\n\n","category":"function"},{"location":"api/distributions/#JuliaBUGS.BUGSPrimitives.df","page":"Distributions","title":"JuliaBUGS.BUGSPrimitives.df","text":"df(n, m, μ=0, τ=1)\n\nReturns an instance of F-distribution  object with n and m degrees of freedom, location μ, and scale τ. This function is only valid when μ = 0 and τ = 1,\n\np(xn m μ τ) = fracGammaleft(fracn+m2right)Gammaleft(fracn2right) Gammaleft(fracm2right) left(fracnmright)^fracn2 sqrtτ left(sqrtτ(x - μ)right)^fracn2-1 left(1 + fracn sqrtτ(x-μ)mright)^-fracn+m2\n\nwhere fracn sqrtτ (x - μ)m  -1.\n\n\n\n\n\n","category":"function"},{"location":"api/distributions/#JuliaBUGS.BUGSPrimitives.dunif","page":"Distributions","title":"JuliaBUGS.BUGSPrimitives.dunif","text":"dunif(a, b)\n\nReturns an instance of Uniform  with lower bound a and upper bound b.\n\np(xab) = frac1b - a\n\n\n\n\n\n","category":"function"},{"location":"api/distributions/#JuliaBUGS.BUGSPrimitives.dbeta","page":"Distributions","title":"JuliaBUGS.BUGSPrimitives.dbeta","text":"dbeta(a, b)\n\nReturns an instance of Beta  with shape parameters a and b.\n\np(xab) = fracGamma(a + b)Gamma(a)Gamma(b) x^a-1 (1 - x)^b-1\n\n\n\n\n\n","category":"function"},{"location":"api/distributions/#JuliaBUGS.BUGSPrimitives.dmnorm","page":"Distributions","title":"JuliaBUGS.BUGSPrimitives.dmnorm","text":"dmnorm(μ::AbstractVector, T::AbstractMatrix)\n\nReturns an instance of Multivariate Normal  with mean vector μ and covariance matrix T^-1.\n\np(xμT) = (2π)^-k2 T^12 e^-12 (x-μ) T (x-μ)\n\nwhere k is the dimension of x.\n\n\n\n\n\n","category":"function"},{"location":"api/distributions/#JuliaBUGS.BUGSPrimitives.dmt","page":"Distributions","title":"JuliaBUGS.BUGSPrimitives.dmt","text":"dmt(μ::AbstractVector, T::AbstractMatrix, k)\n\nReturns an instance of Multivariate T  with mean vector μ, scale matrix T^-1, and k degrees of freedom.\n\np(xkμΣ) = fracGamma((k+d)2)Gamma(k2) (kpi)^p2 Σ^12 left(1 + frac1k (x-μ)^T Σ^-1 (x-μ)right)^-frack+p2\n\nwhere p is the dimension of x.\n\n\n\n\n\n","category":"function"},{"location":"api/distributions/#JuliaBUGS.BUGSPrimitives.dwish","page":"Distributions","title":"JuliaBUGS.BUGSPrimitives.dwish","text":"dwish(R::AbstractMatrix, k)\n\nReturns an instance of Wishart  with k degrees of freedom and the scale matrix T^-1.\n\np(XRk) = R^k2 X^(k-p-1)2 e^-(12) tr(RX)  (2^kp2 Γ_p(k2))\n\nwhere p is the dimension of X, and it should be less than or equal to k. \n\n\n\n\n\n","category":"function"},{"location":"api/distributions/#JuliaBUGS.BUGSPrimitives.ddirich","page":"Distributions","title":"JuliaBUGS.BUGSPrimitives.ddirich","text":"ddirich(θ::AbstractVector)\n\nReturn an instance of Dirichlet  with parameters θ_i.\n\np(xθ) = fracΓ(sum θ) Γ(θ)  x_i^θ_i - 1\n\nwhere theta_i  0 x_i in 0 1 sum_i x_i = 1\n\n\n\n\n\n","category":"function"},{"location":"api/distributions/#JuliaBUGS.BUGSPrimitives.dbern","page":"Distributions","title":"JuliaBUGS.BUGSPrimitives.dbern","text":"dbern(p)\n\nReturn an instance of Bernoulli  with success probability p.\n\np(xp) = p^x (1 - p)^1-x\n\n\n\n\n\n","category":"function"},{"location":"api/distributions/#JuliaBUGS.BUGSPrimitives.dbin","page":"Distributions","title":"JuliaBUGS.BUGSPrimitives.dbin","text":"dbin(p, n)\n\nReturns an instance of Binomial  with number of trials n and success probability p.\n\np(xnp) = binomnx p^x (1 - p)^n-x\n\nend\n\nwhere theta in 0 1 n in mathbbZ^+ and x = 0 ldots n.\n\n\n\n\n\n","category":"function"},{"location":"api/distributions/#JuliaBUGS.BUGSPrimitives.dcat","page":"Distributions","title":"JuliaBUGS.BUGSPrimitives.dcat","text":"dcat(p)\n\nReturns an instance of Categorical  with probabilities p.\n\np(xp) = px\n\n\n\n\n\n","category":"function"},{"location":"api/distributions/#JuliaBUGS.BUGSPrimitives.dpois","page":"Distributions","title":"JuliaBUGS.BUGSPrimitives.dpois","text":"dpois(θ)\n\nReturns an instance of Poisson  with mean (and variance) θ.\n\np(xθ) = e^-θ θ^x  x\n\n\n\n\n\n","category":"function"},{"location":"api/distributions/#JuliaBUGS.BUGSPrimitives.dgeom","page":"Distributions","title":"JuliaBUGS.BUGSPrimitives.dgeom","text":"dgeom(θ)\n\nReturns an instance of Geometric  with success probability θ.\n\np(xθ) = (1 - θ)^x-1 θ\n\n\n\n\n\n","category":"function"},{"location":"api/distributions/#JuliaBUGS.BUGSPrimitives.dnegbin","page":"Distributions","title":"JuliaBUGS.BUGSPrimitives.dnegbin","text":"dnegbin(p, r)\n\nReturns an instance of Negative Binomial  with number of failures r and success probability p.\n\nP(xrp) = binomx + r - 1x (1 - p)^x p^r\n\nwhere x in mathbbZ^+.\n\n\n\n\n\n","category":"function"},{"location":"api/distributions/#JuliaBUGS.BUGSPrimitives.dbetabin","page":"Distributions","title":"JuliaBUGS.BUGSPrimitives.dbetabin","text":"dbetabin(a, b, n)\n\nReturns an instance of Beta Binomial  with number of trials n and shape parameters a and b.\n\nP(xa b n) = fracbinomnx binoma + b - 1a + x - 1binoma + b + n - 1n\n\n\n\n\n\n","category":"function"},{"location":"api/distributions/#JuliaBUGS.BUGSPrimitives.dhyper","page":"Distributions","title":"JuliaBUGS.BUGSPrimitives.dhyper","text":"dhyper(n₁, n₂, m₁, ψ=1)\n\nReturns an instance of Hypergeometric.  This distribution is used when sampling without replacement from a population consisting of  n₁ successes and n₂ failures, with m₁ being the number of trials or the sample size.  The function currently only allows for ψ = 1.\n\np(x  n₁ n₂ m₁ psi) = fracbinomn₁x binomn₂m₁ - x psi^xsum_i=u_0^u_1 binomn1i binomn2m₁ - i psi^i\n\nwhere u_0 = max(0 m₁-n₂) u_1 = min(n₁m₁) and u_0 leq x leq u_1\n\n\n\n\n\n","category":"function"},{"location":"api/distributions/#JuliaBUGS.BUGSPrimitives.dmulti","page":"Distributions","title":"JuliaBUGS.BUGSPrimitives.dmulti","text":"dmulti(θ::AbstractVector, n)\n\nReturns an instance Multinomial  with number of trials n and success probabilities θ.\n\nP(xnθ) = fracn_r x_r _r θ_r^x_r\n\n\n\n\n\n","category":"function"},{"location":"api/user_defined_functions/#Define-and-Use-Your-Own-Functions-and-Distributions","page":"User-Defined Functions and Distributions","title":"Define and Use Your Own Functions and Distributions","text":"","category":"section"},{"location":"api/user_defined_functions/","page":"User-Defined Functions and Distributions","title":"User-Defined Functions and Distributions","text":"Out of the box, JuliaBUGS only allows functions and distributions defined in BUGSPrimitives, Base, and Distributions.jl to be used in the model. With the @register_primitive macro, users can register their own functions and distributions with JuliaBUGS. It is important to ensure that any functions used are pure mathematical functions. This implies that such functions should not alter any external state including but not limited to modifying global variables, writing data to files. (Printing might be okay, but do at discretion.)","category":"page"},{"location":"api/user_defined_functions/","page":"User-Defined Functions and Distributions","title":"User-Defined Functions and Distributions","text":"julia> JuliaBUGS.@register_primitive function f(x)\n    return x + 1\nend\nf (generic function with 1 method)\n\njulia> JuliaBUGS.f(2)\n3","category":"page"},{"location":"api/user_defined_functions/","page":"User-Defined Functions and Distributions","title":"User-Defined Functions and Distributions","text":"alternatively, you can use the @register_primitive macro to register a function that is already defined in the global scope","category":"page"},{"location":"api/user_defined_functions/","page":"User-Defined Functions and Distributions","title":"User-Defined Functions and Distributions","text":"julia> f(x) = x + 1\nf (generic function with 1 method)\n\njulia> JuliaBUGS.@register_primitive(f);\n\njulia> JuliaBUGS.f(1)\n2","category":"page"},{"location":"api/user_defined_functions/","page":"User-Defined Functions and Distributions","title":"User-Defined Functions and Distributions","text":"After registering the function or distributions, they can be used just like any other functions or distributions provided by BUGS.","category":"page"},{"location":"parser/#BUGS-Parser","page":"Parser","title":"BUGS Parser","text":"","category":"section"},{"location":"parser/","page":"Parser","title":"Parser","text":"The macro @bugs produces a Julia Expr object that represents the BUGS model definition.","category":"page"},{"location":"parser/","page":"Parser","title":"Parser","text":"If the input is a String, it's assumed to be a program in the original BUGS language. In this case, the macro will first convert the program to an equivalent Julia program, then use the Julia parser to parse the program into an Expr object.","category":"page"},{"location":"parser/","page":"Parser","title":"Parser","text":"Both model definitions written in Julia and those written in the original BUGS and subsequently parsed are now represented as a Julia Expr object. These objects go through syntax checking and post-processing to create the input for the compile function.","category":"page"},{"location":"parser/","page":"Parser","title":"Parser","text":"Below, we describe how the original BUGS program is translated to an equivalent Julia program and detail the post-processing done to the Expr object.","category":"page"},{"location":"parser/#BUGS-to-Julia-Translation","page":"Parser","title":"BUGS to Julia Translation","text":"","category":"section"},{"location":"parser/","page":"Parser","title":"Parser","text":"In this section, we refer to the translation program as the \"parser\" and the translating process as \"parsing\". Although the parser doesn't produce a syntax tree, it does follow the form of a recursive descent parser, building a Julia program in the form of a vector of tokens rather than a syntax tree.","category":"page"},{"location":"parser/","page":"Parser","title":"Parser","text":"This general implementation is heavily inspired by JuliaSyntax.jl, the official parser for Julia since version 1.10.","category":"page"},{"location":"parser/","page":"Parser","title":"Parser","text":"The BUGS parser implemented here takes a token stream with a recursive descent structure and checks the program's correctness. Here's how it works:","category":"page"},{"location":"parser/","page":"Parser","title":"Parser","text":"Use tokenize to obtain the token vector.\nInspect the tokens and build the Julia version of the program as a vector of tokens.\nPush the token to the Julia version of the program vector when appropriate.\nDetect errors and make necessary alterations to tokens, such as deletion, combination, or replacement.","category":"page"},{"location":"parser/","page":"Parser","title":"Parser","text":"During the recursive descent, BUGS syntax tokens will be translated into Julia syntax tokens. Some tokens will remain as they are, while others will be transformed, removed, or new tokens may be added.","category":"page"},{"location":"parser/","page":"Parser","title":"Parser","text":"The parser will throw an error if it encounters a program that does not adhere to strict BUGS syntax.","category":"page"},{"location":"parser/#Some-Notes-on-Error-Recovery","page":"Parser","title":"Some Notes on Error Recovery","text":"","category":"section"},{"location":"parser/","page":"Parser","title":"Parser","text":"The current error recovery is ad hoc and primarily rudimentary. If the program is correct, it will produce the correct result. If the program is syntactically or semantically incorrect, the token stream will not be pushed forward, resulting in failure.","category":"page"},{"location":"parser/","page":"Parser","title":"Parser","text":"The failure detection mechanism checks if two errors occur with the same \"current token\". If they do, the parser stops and reports the error. This ensures that the parser won't incorrectly parse a flawed program.","category":"page"},{"location":"graph_plotting/#Plotting-graphs","page":"Plotting","title":"Plotting graphs","text":"","category":"section"},{"location":"graph_plotting/","page":"Plotting","title":"Plotting","text":"Plotting the graphical model can be very beneficial for debugging the model.","category":"page"},{"location":"graph_plotting/","page":"Plotting","title":"Plotting","text":"note: Plate notation is not yet supported\nUsers are advised to begin with a model that contains fewer nodes, so that the graph is easier to visualize.","category":"page"},{"location":"graph_plotting/","page":"Plotting","title":"Plotting","text":"We have set up standard plotting routines with GraphMakie.jl and GraphPlot.jl, via package extensions.","category":"page"},{"location":"graph_plotting/","page":"Plotting","title":"Plotting","text":"Observed nodes are colored in gray, unobserved nodes are colored in white, and deterministic nodes are colored in light blue.","category":"page"},{"location":"graph_plotting/","page":"Plotting","title":"Plotting","text":"model_def = @bugs begin\n    a ~ dnorm(f, c)\n    f = b - 1\n    b ~ dnorm(0, 1)\n    c ~ dnorm(l, 1)\n    g = a * 2\n    d ~ dnorm(g, 1)\n    h = g + 2\n    e ~ dnorm(h, i)\n    i ~ dnorm(0, 1)\n    l ~ dnorm(0, 1)\nend\n\ndata = (\n    e = 5.0,\n)\n\ninits = (\n    a = 1.0,\n    b = 2.0,\n    c = 3.0,\n    d = 4.0,\n    i = 4.0,\n    l = -2.0,\n)\n\nmodel = compile(model_def, data, inits)","category":"page"},{"location":"graph_plotting/#[GraphPlot.jl](https://github.com/JuliaGraphs/GraphPlot.jl)","page":"Plotting","title":"GraphPlot.jl","text":"","category":"section"},{"location":"graph_plotting/","page":"Plotting","title":"Plotting","text":"using GraphPlot\ngplot(model)","category":"page"},{"location":"graph_plotting/","page":"Plotting","title":"Plotting","text":"(Image: GraphPlot)","category":"page"},{"location":"graph_plotting/#[GraphMakie.jl](https://github.com/MakieOrg/GraphMakie.jl)","page":"Plotting","title":"GraphMakie.jl","text":"","category":"section"},{"location":"graph_plotting/","page":"Plotting","title":"Plotting","text":"using GLMakie, GraphMakie\ngraphplot(model)","category":"page"},{"location":"graph_plotting/","page":"Plotting","title":"Plotting","text":"(Image: GraphMakie)","category":"page"},{"location":"R_interface/#R-Interface","page":"R Interface","title":"R Interface","text":"","category":"section"},{"location":"R_interface/","page":"R Interface","title":"R Interface","text":"Interoperation between Julia and R is very solid and simple to use.","category":"page"},{"location":"R_interface/","page":"R Interface","title":"R Interface","text":"Here are some very useful packages:","category":"page"},{"location":"R_interface/","page":"R Interface","title":"R Interface","text":"RCall.jl: interaction with R runtime.\nRData.jl: reading and writing R data files.\nDataFrames.jl: pandas and dplyr for Julia.\nCSV.jl: CSV file reading and writing.\nJSON.jl, JSON3.jl, Serde.jl: JSON file reading and writing.","category":"page"},{"location":"tricks/#BUGS-Implementation-Tricks","page":"BUGS Implementation Tricks","title":"BUGS Implementation Tricks","text":"","category":"section"},{"location":"tricks/#Implementing-Custom-Distributions-Without-Low-Level-Coding-in-Previous-Version-of-BUGS","page":"BUGS Implementation Tricks","title":"Implementing Custom Distributions Without Low-Level Coding in Previous Version of BUGS","text":"","category":"section"},{"location":"tricks/","page":"BUGS Implementation Tricks","title":"BUGS Implementation Tricks","text":"In JuliaBUGS, users can simply create new distributions using the Distributions.jl interface and use them as built-in distributions. In previous versions of BUGS, defining new distributions required lower-level programming, as users needed to work directly with the underlying implementation.","category":"page"},{"location":"tricks/","page":"BUGS Implementation Tricks","title":"BUGS Implementation Tricks","text":"Here we present some of the tricks that were used in previous BUGS implementations to create custom distributions without implementing them directly at the low level. These approaches are still valid in JuliaBUGS, though the native distribution interface is generally preferred.","category":"page"},{"location":"tricks/#The-\"Zeros-Trick\"","page":"BUGS Implementation Tricks","title":"The \"Zeros Trick\"","text":"","category":"section"},{"location":"tricks/","page":"BUGS Implementation Tricks","title":"BUGS Implementation Tricks","text":"When you need a distribution not included in the standard set, the \"zeros trick\" offers an elegant solution. This technique leverages the fact that a Poisson observation with mean phi and value 0 has likelihood e^-phi.","category":"page"},{"location":"tricks/","page":"BUGS Implementation Tricks","title":"BUGS Implementation Tricks","text":"How it works:","category":"page"},{"location":"tricks/","page":"BUGS Implementation Tricks","title":"BUGS Implementation Tricks","text":"Create artificial data points of zeros\nSet phii = -log(Li) + C, where:\nLi\nis your desired likelihood term\nC\nis a constant large enough to ensure phii  0","category":"page"},{"location":"tricks/","page":"BUGS Implementation Tricks","title":"BUGS Implementation Tricks","text":"Implementation:","category":"page"},{"location":"tricks/","page":"BUGS Implementation Tricks","title":"BUGS Implementation Tricks","text":"C <- 10000    # Large constant ensuring phi[i] > 0\n\nfor (i in 1:N) {\n    zeros[i] <- 0\n    phi[i] <- -log(L[i]) + C\n    zeros[i] ~ dpois(phi[i])\n}","category":"page"},{"location":"tricks/","page":"BUGS Implementation Tricks","title":"BUGS Implementation Tricks","text":"This method is particularly useful for implementing truncated distributions or any arbitrary likelihood function.","category":"page"},{"location":"tricks/#The-\"Ones-Trick\"","page":"BUGS Implementation Tricks","title":"The \"Ones Trick\"","text":"","category":"section"},{"location":"tricks/","page":"BUGS Implementation Tricks","title":"BUGS Implementation Tricks","text":"An alternative approach uses Bernoulli observations fixed at 1:","category":"page"},{"location":"tricks/","page":"BUGS Implementation Tricks","title":"BUGS Implementation Tricks","text":"How it works:","category":"page"},{"location":"tricks/","page":"BUGS Implementation Tricks","title":"BUGS Implementation Tricks","text":"Create artificial data points of ones\nDefine probabilities proportional to your desired likelihood: pi = fracLiC\nChoose C large enough to ensure pi  1","category":"page"},{"location":"tricks/","page":"BUGS Implementation Tricks","title":"BUGS Implementation Tricks","text":"Implementation:","category":"page"},{"location":"tricks/","page":"BUGS Implementation Tricks","title":"BUGS Implementation Tricks","text":"C <- 10000    # Large constant ensuring p[i] < 1\n\nfor (i in 1:N) {\n    ones[i] <- 1\n    p[i] <- L[i] / C\n    ones[i] ~ dbern(p[i])\n}","category":"page"},{"location":"tricks/#Using-dloglik-in-OpenBUGS-and-MultiBUGS","page":"BUGS Implementation Tricks","title":"Using dloglik in OpenBUGS and MultiBUGS","text":"","category":"section"},{"location":"tricks/","page":"BUGS Implementation Tricks","title":"BUGS Implementation Tricks","text":"The dloglik distribution provides a more direct approach for implementing custom likelihoods:","category":"page"},{"location":"tricks/","page":"BUGS Implementation Tricks","title":"BUGS Implementation Tricks","text":"dummy[i] <- 0\ndummy[i] ~ dloglik(logLike[i])","category":"page"},{"location":"tricks/","page":"BUGS Implementation Tricks","title":"BUGS Implementation Tricks","text":"Where logLike[i] is the log-likelihood contribution for observation i. This essentially implements the \"zeros trick\" behind the scenes.","category":"page"},{"location":"tricks/","page":"BUGS Implementation Tricks","title":"BUGS Implementation Tricks","text":"Example: Manual Normal Likelihood Implementation","category":"page"},{"location":"tricks/","page":"BUGS Implementation Tricks","title":"BUGS Implementation Tricks","text":"model {\n   for (i in 1:7) {\n      dummy[i] <- 0\n      dummy[i] ~ dloglik(logLike[i])\n      logLike[i] <- -log(sigma) - 0.5 * pow((x[i] - mu)/sigma, 2)         \n   }\n   mu ~ dunif(-10, 10)\n   sigma ~ dunif(0, 10)\n}","category":"page"},{"location":"tricks/","page":"BUGS Implementation Tricks","title":"BUGS Implementation Tricks","text":"Standard equivalent:","category":"page"},{"location":"tricks/","page":"BUGS Implementation Tricks","title":"BUGS Implementation Tricks","text":"model {\n   for (i in 1:7) {\n      x[i] ~ dnorm(mu, prec)\n   }\n   prec <- 1 / (sigma * sigma)\n   mu ~ dunif(-10, 10)\n   sigma ~ dunif(0, 10)\n}","category":"page"},{"location":"tricks/#Implementing-Custom-Prior-Distributions","page":"BUGS Implementation Tricks","title":"Implementing Custom Prior Distributions","text":"","category":"section"},{"location":"tricks/","page":"BUGS Implementation Tricks","title":"BUGS Implementation Tricks","text":"You can use dloglik to implement non-standard prior distributions:","category":"page"},{"location":"tricks/","page":"BUGS Implementation Tricks","title":"BUGS Implementation Tricks","text":"theta ~ dflat()           # Use flat improper prior as base\ndummy <- 0\ndummy ~ dloglik(logLike)  # Add custom prior via log-likelihood\nlogLike <- log(desired_prior_for_theta)","category":"page"},{"location":"tricks/","page":"BUGS Implementation Tricks","title":"BUGS Implementation Tricks","text":"Example: Manual Normal Prior Implementation","category":"page"},{"location":"tricks/","page":"BUGS Implementation Tricks","title":"BUGS Implementation Tricks","text":"model {\n   for (i in 1:7) {\n      x[i] ~ dnorm(mu, prec)\n   }\n   dummy <- 0\n   dummy ~ dloglik(phi)\n   phi <- -0.5 * pow(mu, 2)  # log(N(0,1))\n   mu ~ dflat()              # Base distribution\n   prec <- 1 / (sigma * sigma)\n   sigma ~ dunif(0, 10)\n}","category":"page"},{"location":"tricks/","page":"BUGS Implementation Tricks","title":"BUGS Implementation Tricks","text":"Standard equivalent:","category":"page"},{"location":"tricks/","page":"BUGS Implementation Tricks","title":"BUGS Implementation Tricks","text":"model {\n   for (i in 1:7) {\n      x[i] ~ dnorm(mu, prec)\n   }\n   mu ~ dnorm(0, 1)\n   prec <- 1 / (sigma * sigma)\n   sigma ~ dunif(0, 10)\n}","category":"page"},{"location":"tricks/","page":"BUGS Implementation Tricks","title":"BUGS Implementation Tricks","text":"Note: Using dloglik for priors may trigger Metropolis sampling, potentially leading to slower convergence and higher Monte Carlo errors.","category":"page"},{"location":"tricks/#Working-with-Predictions-and-Complex-Models","page":"BUGS Implementation Tricks","title":"Working with Predictions and Complex Models","text":"","category":"section"},{"location":"tricks/#Predicting-New-Observations","page":"BUGS Implementation Tricks","title":"Predicting New Observations","text":"","category":"section"},{"location":"tricks/","page":"BUGS Implementation Tricks","title":"BUGS Implementation Tricks","text":"To generate predictions for a new observation x.pred, specify it as missing and assign an improper uniform prior:","category":"page"},{"location":"tricks/","page":"BUGS Implementation Tricks","title":"BUGS Implementation Tricks","text":"x.pred ~ dflat()  # Improper uniform prior","category":"page"},{"location":"tricks/","page":"BUGS Implementation Tricks","title":"BUGS Implementation Tricks","text":"Be aware this approach may increase computational inefficiency and Monte Carlo error.","category":"page"},{"location":"tricks/#Handling-Model-Mixtures-of-Different-Complexity","page":"BUGS Implementation Tricks","title":"Handling Model Mixtures of Different Complexity","text":"","category":"section"},{"location":"tricks/","page":"BUGS Implementation Tricks","title":"BUGS Implementation Tricks","text":"For mixture models with components of varying complexity, a standard mixture distribution approach is often sufficient without requiring reversible jump techniques:","category":"page"},{"location":"tricks/","page":"BUGS Implementation Tricks","title":"BUGS Implementation Tricks","text":"model {\n   mu ~ dunif(-5, 5)\n   p ~ dunif(0, 1)\n   m[1] <- 0       # First component mean\n   m[2] <- mu      # Second component mean\n   \n   for (i in 1:100) {\n      group[i] ~ dbern(p)           # Component membership\n      index[i] <- group[i] + 1\n      y[i] ~ dnorm(m[index[i]], 1)  # Observation from selected component\n   }\n}","category":"page"},{"location":"tricks/#Managing-Random-Set-Sizes","page":"BUGS Implementation Tricks","title":"Managing Random Set Sizes","text":"","category":"section"},{"location":"tricks/","page":"BUGS Implementation Tricks","title":"BUGS Implementation Tricks","text":"When loop bounds depend on random quantities (e.g., changepoints), use step functions to conditionally include elements:","category":"page"},{"location":"tricks/","page":"BUGS Implementation Tricks","title":"BUGS Implementation Tricks","text":"for (i in 1:N) {\n   ind[i] <- 1 + step(i - K - 0.01)  # 1 if i ≤ K, 2 if i > K\n   y[i] ~ model[ind[i]]              # Select appropriate model\n}","category":"page"},{"location":"tricks/","page":"BUGS Implementation Tricks","title":"BUGS Implementation Tricks","text":"Example: Computing the Sum of First K Integers","category":"page"},{"location":"tricks/","page":"BUGS Implementation Tricks","title":"BUGS Implementation Tricks","text":"model {\n   # Define possible values for K\n   for (i in 1:10) {\n      p[i] <- 1/10  # Equal probability for each value\n      x[i] <- i     # Value i\n   }\n   \n   # Random selection of K\n   K ~ dcat(p[])\n   \n   # Sum elements conditionally\n   for (i in 1:10) {\n      xtosum[i] <- x[i] * step(K - i + 0.01)  # Include x[i] only if i ≤ K\n   }\n   \n   # Compute final sum\n   s <- sum(xtosum[])\n}","category":"page"},{"location":"#JuliaBUGS.jl","page":"Home","title":"JuliaBUGS.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"JuliaBUGS is a graph-based probabilistic programming framework inspired by the BUGS language.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Key features of JuliaBUGS include:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Compatibility with existing BUGS programs\nExtensibility through user-defined functions and distributions; programmable inference\nSeamless integration with Julia's high-performance numerical and scientific computing libraries\nAutomatic differentiation and sampling using Hamiltonian Monte Carlo","category":"page"},{"location":"","page":"Home","title":"Home","text":"It's important to note that while BUGS traditionally refers to either the software system, the language, or the inference algorithm, JuliaBUGS is a pure Julia implementation of the BUGS language, not a wrapper for the BUGS system.","category":"page"},{"location":"#Understanding-the-BUGS-Language","page":"Home","title":"Understanding the BUGS Language","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The BUGS (Bayesian inference Using Gibbs Sampling) language is designed for specifying directed graphical models in probabilistic programming. Unlike imperative probabilistic programming languages such as Turing.jl or Pyro, BUGS focuses on declarative relationships between nodes in a graph.","category":"page"},{"location":"","page":"Home","title":"Home","text":"This graph-based approach offers several advantages:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Clarity: It provides a clear understanding of dependencies and relationships within complex systems.\nTransparency: Users can explicitly state conditional dependencies between variables, making model structure and assumptions more transparent.\nEase of development and interpretation: The graphical representation aids in both model development and result interpretation.\nEfficient inference: The graph structure facilitates the application of advanced inference algorithms, enabling more efficient computation by leveraging the model's structure.","category":"page"},{"location":"","page":"Home","title":"Home","text":"By adopting this approach, JuliaBUGS aims to combine the clarity and power of graphical models with the performance and flexibility of the Julia programming language.","category":"page"},{"location":"source_gen/#Generating-Sequential-Code-from-BUGS-Program","page":"Generating Sequential Code from BUGS Program","title":"Generating Sequential Code from BUGS Program","text":"","category":"section"},{"location":"source_gen/#Transform-BUGS-Programs-into-Sequential-Programs","page":"Generating Sequential Code from BUGS Program","title":"Transform BUGS Programs into Sequential Programs","text":"","category":"section"},{"location":"source_gen/","page":"Generating Sequential Code from BUGS Program","title":"Generating Sequential Code from BUGS Program","text":"JuliaBUGS compiles a BUGS program into a directed probabilistic graphical model. This graphical model also serves as a dependence graph between the variables in the model/program.","category":"page"},{"location":"source_gen/","page":"Generating Sequential Code from BUGS Program","title":"Generating Sequential Code from BUGS Program","text":"With the dependence graph, the execution of the probabilistic program can be carried out by visiting nodes (variables) in the graph following a topological order. (Parallel computing opportunities are also exposed by exploiting the dependence relationships.)","category":"page"},{"location":"source_gen/","page":"Generating Sequential Code from BUGS Program","title":"Generating Sequential Code from BUGS Program","text":"The challenge arises because, given the semantics of the BUGS language, every element of an array can be a random variable, thus demanding its own node in the graph. Consequently, naively converting the graph execution into sequential programs would amount to fully unrolling all loops, which is often infeasible, particularly for automatic differentiation (AD) tools.","category":"page"},{"location":"source_gen/","page":"Generating Sequential Code from BUGS Program","title":"Generating Sequential Code from BUGS Program","text":"A potential solution is to transform the user-provided program, which might be out of sequential order, into a correct sequential program. Correctness here is defined as ensuring no variable is read before it is written. ","category":"page"},{"location":"source_gen/","page":"Generating Sequential Code from BUGS Program","title":"Generating Sequential Code from BUGS Program","text":"Program transformation is a well-studied topic. It is known to be very challenging in terms of conceptual understanding, algorithm design, and practical implementation.","category":"page"},{"location":"source_gen/","page":"Generating Sequential Code from BUGS Program","title":"Generating Sequential Code from BUGS Program","text":"Traditionally, program transformation optimizes sequentially valid programs for performance (speed, memory usage) based on hardware characteristics, while respecting data dependencies. ","category":"page"},{"location":"source_gen/","page":"Generating Sequential Code from BUGS Program","title":"Generating Sequential Code from BUGS Program","text":"For JuliaBUGS, it's crucial to clarify that the primary goal is not optimizing the generated program's performance but ensuring its correctness with respect to sequential execution order. The task is to transform a potentially out-of-sequential-order program into a sequentially correct one.","category":"page"},{"location":"source_gen/","page":"Generating Sequential Code from BUGS Program","title":"Generating Sequential Code from BUGS Program","text":"We aim to restrict ourselves initially and ask: How can we use a minimal set of transformations, starting with just statement reordering, to generate correct sequential programs from BUGS programs that might specify operations out of order? If the original program is already sequentially correct, it should be used directly. Furthermore, we need to provide clear feedback to the user if a transformation is necessary or if the program structure inherently prevents a valid sequential ordering, guiding them on how to rewrite it.","category":"page"},{"location":"source_gen/","page":"Generating Sequential Code from BUGS Program","title":"Generating Sequential Code from BUGS Program","text":"Consider the Rats example:","category":"page"},{"location":"source_gen/","page":"Generating Sequential Code from BUGS Program","title":"Generating Sequential Code from BUGS Program","text":"begin\n    for i in 1:N\n        for j in 1:T\n            Y[i, j] ~ dnorm(mu[i, j], tau_c)              # (1)\n            mu[i, j] = alpha[i] + beta[i] * (x[j] - xbar)  # (2)\n        end\n        alpha[i] ~ dnorm(alpha_c, alpha_tau)               # (3)\n        beta[i] ~ dnorm(beta_c, beta_tau)                  # (4)\n    end\n    tau_c ~ dgamma(0.001, 0.001)                          # (5)\n    sigma = 1 / sqrt(tau_c)                                # (6)\n    alpha_c ~ dnorm(0.0, 1.0e-6)                           # (7)\n    alpha_tau ~ dgamma(0.001, 0.001)                       # (8)\n    beta_c ~ dnorm(0.0, 1.0e-6)                            # (9)\n    beta_tau ~ dgamma(0.001, 0.001)                        # (10)\n    alpha0 = alpha_c - xbar * beta_c                        # (11)\nend","category":"page"},{"location":"source_gen/","page":"Generating Sequential Code from BUGS Program","title":"Generating Sequential Code from BUGS Program","text":"This program defines the same probabilistic model (has the same BUGS semantics) as the following two versions:","category":"page"},{"location":"source_gen/","page":"Generating Sequential Code from BUGS Program","title":"Generating Sequential Code from BUGS Program","text":"Version 1 (Reordered Statements):","category":"page"},{"location":"source_gen/","page":"Generating Sequential Code from BUGS Program","title":"Generating Sequential Code from BUGS Program","text":"begin\n    tau_c ~ dgamma(0.001, 0.001)                           # (5)\n    sigma = 1 / sqrt(tau_c)                                # (6)\n    alpha_c ~ dnorm(0.0, 1.0e-6)                           # (7)\n    alpha_tau ~ dgamma(0.001, 0.001)                       # (8)\n    beta_c ~ dnorm(0.0, 1.0e-6)                            # (9)\n    beta_tau ~ dgamma(0.001, 0.001)                        # (10)\n    \n    for i in 1:N\n        alpha[i] ~ dnorm(alpha_c, alpha_tau)               # (3)\n        beta[i] ~ dnorm(beta_c, beta_tau)                  # (4)\n        \n        for j in 1:T\n            mu[i, j] = alpha[i] + beta[i] * (x[j] - xbar)  # (2)\n            Y[i, j] ~ dnorm(mu[i, j], tau_c)               # (1)\n        end\n    end\n    \n    alpha0 = alpha_c - xbar * beta_c                       # (11)\nend","category":"page"},{"location":"source_gen/","page":"Generating Sequential Code from BUGS Program","title":"Generating Sequential Code from BUGS Program","text":"Version 2 (Reordered Statements + Loop Fission):","category":"page"},{"location":"source_gen/","page":"Generating Sequential Code from BUGS Program","title":"Generating Sequential Code from BUGS Program","text":"begin\n    tau_c ~ dgamma(0.001, 0.001)                           # (5)\n    sigma = 1 / sqrt(tau_c)                                # (6)\n    alpha_c ~ dnorm(0.0, 1.0e-6)                           # (7)\n    alpha_tau ~ dgamma(0.001, 0.001)                       # (8)\n    beta_c ~ dnorm(0.0, 1.0e-6)                            # (9)\n    beta_tau ~ dgamma(0.001, 0.001)                        # (10)\n    \n    for i in 1:N\n        alpha[i] ~ dnorm(alpha_c, alpha_tau)               # (3)\n    end\n\n    for i in 1:N\n        beta[i] ~ dnorm(beta_c, beta_tau)                  # (4)\n    end\n\n    for i in 1:N\n        for j in 1:T\n            mu[i, j] = alpha[i] + beta[i] * (x[j] - xbar)  # (2)\n        end\n    end\n    \n    for i in 1:N\n        for j in 1:T    \n            Y[i, j] ~ dnorm(mu[i, j], tau_c)               # (1)\n        end\n    end\n    \n    alpha0 = alpha_c - xbar * beta_c                        # (11)\nend","category":"page"},{"location":"source_gen/","page":"Generating Sequential Code from BUGS Program","title":"Generating Sequential Code from BUGS Program","text":"While all three programs define the same model, only the latter two can run sequentially (e.g., for sampling) without encountering a \"read before write\" error. These are called sequential versions because they respect data dependencies in order.","category":"page"},{"location":"source_gen/","page":"Generating Sequential Code from BUGS Program","title":"Generating Sequential Code from BUGS Program","text":"We use a statement dependence graph to analyze these dependencies. An edge exists from statement Ssource to Ssink if Ssink uses a value defined by Ssource.","category":"page"},{"location":"source_gen/","page":"Generating Sequential Code from BUGS Program","title":"Generating Sequential Code from BUGS Program","text":"Consider this excerpt from the original Rats program:","category":"page"},{"location":"source_gen/","page":"Generating Sequential Code from BUGS Program","title":"Generating Sequential Code from BUGS Program","text":"for i in 1:N\n    for j in 1:T\n        Y[i, j] ~ dnorm(mu[i, j], tau_c)              # (1)\n        mu[i, j] = alpha[i] + beta[i] * (x[j] - xbar)  # (2)\n    end\nend","category":"page"},{"location":"source_gen/","page":"Generating Sequential Code from BUGS Program","title":"Generating Sequential Code from BUGS Program","text":"Statement (2) defines mu[i, j], which statement (1) uses. Thus, the dependence graph contains an edge (2) -> (1). This is a flow dependence (or Read-After-Write). (We will not consider Write-After-Read and Write-After-Write dependencies.)","category":"page"},{"location":"source_gen/","page":"Generating Sequential Code from BUGS Program","title":"Generating Sequential Code from BUGS Program","text":"The full statement dependence graph for Rats is:","category":"page"},{"location":"source_gen/","page":"Generating Sequential Code from BUGS Program","title":"Generating Sequential Code from BUGS Program","text":"flowchart TB\n    8 --> 3\n    7 --> 3\n    10 --> 4\n    9 --> 11\n    9 --> 4\n    4 --> 11\n    3 --> 2\n    4 --> 2\n    2 --> 1\n    5 --> 1\n    5 --> 6","category":"page"},{"location":"source_gen/","page":"Generating Sequential Code from BUGS Program","title":"Generating Sequential Code from BUGS Program","text":"This graph is acyclic. But given this dependence graph, we can only produce Version 2 of the program by fissioning all the loops. The fissioning is conservative because given the dependence edges, we can only ensure the sequential order by finishing all the computation associated with a statement before moving on to the next one.","category":"page"},{"location":"source_gen/","page":"Generating Sequential Code from BUGS Program","title":"Generating Sequential Code from BUGS Program","text":"Consider this example:","category":"page"},{"location":"source_gen/","page":"Generating Sequential Code from BUGS Program","title":"Generating Sequential Code from BUGS Program","text":"for i in 1:N\n    x[i] ~ normal(0, 1)     # (1)\n    y[i] ~ normal(x[N], i)  # (2) \nend","category":"page"},{"location":"source_gen/","page":"Generating Sequential Code from BUGS Program","title":"Generating Sequential Code from BUGS Program","text":"The dependence graph is just (1) -> (2), which is acyclic. However, this loop cannot run sequentially. Statement (2) at iteration i needs x[N], but statement (1) defines x[N] only at iteration N. Any iteration i < N for statement (2) reads x[N] before it's written.","category":"page"},{"location":"source_gen/","page":"Generating Sequential Code from BUGS Program","title":"Generating Sequential Code from BUGS Program","text":"The valid sequential version requires loop fission:","category":"page"},{"location":"source_gen/","page":"Generating Sequential Code from BUGS Program","title":"Generating Sequential Code from BUGS Program","text":"for i in 1:N\n    x[i] ~ normal(0, 1)     # (1)\nend\nfor i in 1:N    \n    y[i] ~ normal(x[N], i)  # (2) \nend","category":"page"},{"location":"source_gen/","page":"Generating Sequential Code from BUGS Program","title":"Generating Sequential Code from BUGS Program","text":"But this not totally satisfactory, because ideally we would want to be able to tell if we don't have to fission all the loops like Version 1 of Rats.","category":"page"},{"location":"source_gen/","page":"Generating Sequential Code from BUGS Program","title":"Generating Sequential Code from BUGS Program","text":"This shows the statement dependence graph alone is not quite sufficient. We need to analyze dependencies within loops more precisely using iteration spaces and dependence vectors. This allows transformations like loop fission (used in Version 2 of Rats).","category":"page"},{"location":"source_gen/","page":"Generating Sequential Code from BUGS Program","title":"Generating Sequential Code from BUGS Program","text":"Iteration Space and Vectors","category":"page"},{"location":"source_gen/","page":"Generating Sequential Code from BUGS Program","title":"Generating Sequential Code from BUGS Program","text":"Consider this loop:","category":"page"},{"location":"source_gen/","page":"Generating Sequential Code from BUGS Program","title":"Generating Sequential Code from BUGS Program","text":"for i in 1:2\n    for j in 1:3\n        x[i] ~ normal(0, j)     # (1)\n        y[i] ~ normal(x[2], i)  # (2) \n    end\nend","category":"page"},{"location":"source_gen/","page":"Generating Sequential Code from BUGS Program","title":"Generating Sequential Code from BUGS Program","text":"Each execution of the loop body corresponds to an iteration vector veck = (i j). The set of all possible iteration vectors is the iteration space, here (i j)  1 le i le 2 1 le j le 3. Iterations execute sequentially in lexicographical order: (1,1), (1,2), (1,3), (2,1), (2,2), (2,3).","category":"page"},{"location":"source_gen/","page":"Generating Sequential Code from BUGS Program","title":"Generating Sequential Code from BUGS Program","text":"Dependence Vectors","category":"page"},{"location":"source_gen/","page":"Generating Sequential Code from BUGS Program","title":"Generating Sequential Code from BUGS Program","text":"If a statement execution at iteration veci (source) defines a value used by a statement execution at iteration vecj (sink), the dependence vector is vecd = vecj - veci. It represents the distance between dependent iterations. (Sometimes, we don't care about the distance between define and use, so we can simply use the sign of the elements of the dependence vector to represent the dependence relation.)","category":"page"},{"location":"source_gen/","page":"Generating Sequential Code from BUGS Program","title":"Generating Sequential Code from BUGS Program","text":"For sequential execution to be valid, all dependence vectors vecd must be lexicographically non-negative (vecd succeq vec0). This means either vecd = vec0 or the first non-zero element of vecd is positive.","category":"page"},{"location":"source_gen/","page":"Generating Sequential Code from BUGS Program","title":"Generating Sequential Code from BUGS Program","text":"A lexicographically negative vector (vecd prec vec0) indicates a violation. It means the sink iteration vecj executes before the source iteration veci in sequential order, but vecj needs the value produced by veci.","category":"page"},{"location":"source_gen/","page":"Generating Sequential Code from BUGS Program","title":"Generating Sequential Code from BUGS Program","text":"Dependence Vectors and Sequential Execution","category":"page"},{"location":"source_gen/","page":"Generating Sequential Code from BUGS Program","title":"Generating Sequential Code from BUGS Program","text":"Dependence vectors help analyze loops. Consider this invalid loop:","category":"page"},{"location":"source_gen/","page":"Generating Sequential Code from BUGS Program","title":"Generating Sequential Code from BUGS Program","text":"x[6] ~ Normal() # (1)\n\nfor i in 1:5\n    x[i] = x[i+1] + i # (2)  \nend","category":"page"},{"location":"source_gen/","page":"Generating Sequential Code from BUGS Program","title":"Generating Sequential Code from BUGS Program","text":"Statement (2) computes x[i] using x[i+1]. The value x[i+1] is defined by statement (2) at iteration i+1 (source). It is used by statement (2) at iteration i (sink). The dependence vector is vecd = vecj_sink - veci_source = (i) - (i+1) = (-1). Since vecd prec vec0, this loop violates sequential order. Computing x[1] requires x[2], defined in a later iteration.","category":"page"},{"location":"source_gen/","page":"Generating Sequential Code from BUGS Program","title":"Generating Sequential Code from BUGS Program","text":"This loop is sequentially valid:","category":"page"},{"location":"source_gen/","page":"Generating Sequential Code from BUGS Program","title":"Generating Sequential Code from BUGS Program","text":"x[1] ~ Normal() # (1)\n\nfor i in 2:5\n    x[i] = x[i-1] + i # (2)  \nend","category":"page"},{"location":"source_gen/","page":"Generating Sequential Code from BUGS Program","title":"Generating Sequential Code from BUGS Program","text":"Statement (2) computes x[i] using x[i-1]. The value x[i-1] is defined by statement (2) at iteration i-1 (source). It is used by statement (2) at iteration i (sink). The dependence vector is vecd = vecj_sink - veci_source = (i) - (i-1) = (1). Since vecd succ vec0, this loop respects sequential order.","category":"page"},{"location":"source_gen/","page":"Generating Sequential Code from BUGS Program","title":"Generating Sequential Code from BUGS Program","text":"Loop-Independent vs. Loop-Carried Dependencies","category":"page"},{"location":"source_gen/","page":"Generating Sequential Code from BUGS Program","title":"Generating Sequential Code from BUGS Program","text":"Dependencies involving loops are classified by their dependence vector vecd = vecj - veci:","category":"page"},{"location":"source_gen/","page":"Generating Sequential Code from BUGS Program","title":"Generating Sequential Code from BUGS Program","text":"Loop-Independent Dependence: Occurs within the same iteration: vecd = vec0.\nLoop-Carried Dependence: Occurs between different iterations: vecd neq vec0.","category":"page"},{"location":"source_gen/","page":"Generating Sequential Code from BUGS Program","title":"Generating Sequential Code from BUGS Program","text":"The Rats example before is an example of (hierarchical) regression models. Many of these models don't model time, and there is no loop in the dependence graph.","category":"page"},{"location":"source_gen/","page":"Generating Sequential Code from BUGS Program","title":"Generating Sequential Code from BUGS Program","text":"But another very important class of models is state-space models where there are recursive structures and thus have loops in the dependence graph.","category":"page"},{"location":"source_gen/","page":"Generating Sequential Code from BUGS Program","title":"Generating Sequential Code from BUGS Program","text":"Consider this Hidden Markov Model (HMM) fragment:","category":"page"},{"location":"source_gen/","page":"Generating Sequential Code from BUGS Program","title":"Generating Sequential Code from BUGS Program","text":"# Main loop processing time steps 2 to T\nfor i in 2:T\n    # State transition: s[i] depends on s[i-1]\n    s[i] ~ dcat(transition[s[i-1], 1:K])  # (S1)\n    \n    # Emission model: Y[i] depends on s[i]\n    Y[i] ~ dnorm(mu[s[i]], tau[s[i]])     # (S2)\nend\n\n# Initial state at time 1\ns[1] ~ dcat(pi[1:K])                      # (S3) Prior for first state\n\nfor k in 1:K\n    # Priors for parameters\n    mu[k] ~ dnorm(0, 0.01)                # (S4) Mean for state k\n    tau[k] ~ dgamma(0.01, 0.01)           # (S5) Precision for state k\n    transition[k, 1:K] ~ ddirch(alpha[1:K]) # (S6) Transition probabilities from state k\n    pi[1:K] ~ ddirch(alpha[1:K])          # (S7) Prior for initial state distribution\nend","category":"page"},{"location":"source_gen/","page":"Generating Sequential Code from BUGS Program","title":"Generating Sequential Code from BUGS Program","text":"flowchart TD\n    subgraph PriorsAndParameters\n        S4[\"(S4) mu[k] ~ dnorm\"]\n        S5[\"(S5) tau[k] ~ dgamma\"]\n        S6[\"(S6) transition[k, 1:K] ~ ddirch\"]\n        S7[\"(S7) pi[1:K] ~ ddirch\"]\n    end\n\n    subgraph InitialState\n        S3[\"(S3) s[1] ~ dcat(pi[1:K])\"]\n    end\n\n    subgraph MainLoop [for i in 1:T]\n        S1[\"(S1) s[i] ~ dcat(transition[s[i-1], 1:K])\"]\n        S2[\"(S2) Y[i] ~ dnorm(mu[s[i]], tau[s[i]])\"]\n    end\n\n    S7 --> S3\n    S6 --> S1\n    S3 --> S1\n    S1 -- loop-carried --> S1\n    S4 --> S2\n    S5 --> S2\n    S1 --> S2\n\n    %% Note: alpha is assumed to be an input/hyperparameter","category":"page"},{"location":"source_gen/","page":"Generating Sequential Code from BUGS Program","title":"Generating Sequential Code from BUGS Program","text":"In this example, there is a self loop on S1. These represent the state transition. To see that we can actually sequentially execute the program, we can compute the dependence vectors.","category":"page"},{"location":"source_gen/","page":"Generating Sequential Code from BUGS Program","title":"Generating Sequential Code from BUGS Program","text":"The computation of the dependence vectors is done in the following steps: When executing the for loop from i = 2 to i = T, we need to compute the dependence vector. Let's examine the case when i = 2:","category":"page"},{"location":"source_gen/","page":"Generating Sequential Code from BUGS Program","title":"Generating Sequential Code from BUGS Program","text":"LHS: s[2] is defined at iteration i=2\nRHS: s[1] is defined at iteration i=1\nDependence vector: vecd = vecj_sink - veci_source = (2) - (1) = (1)","category":"page"},{"location":"source_gen/","page":"Generating Sequential Code from BUGS Program","title":"Generating Sequential Code from BUGS Program","text":"All subsequent iterations follow the same pattern and have the same dependence vector of (1). Because all dependence vectors are lexicographically non-negative, the loop is sequentially valid.","category":"page"},{"location":"source_gen/","page":"Generating Sequential Code from BUGS Program","title":"Generating Sequential Code from BUGS Program","text":"This requires storing the loop variable i for each variable, but we already computed this with JuliaBUGS compilation, so not much overhead is required. ","category":"page"},{"location":"source_gen/","page":"Generating Sequential Code from BUGS Program","title":"Generating Sequential Code from BUGS Program","text":"It should be noted that this approach doesn't scale well for general Julia programs, but it works appropriately for BUGS since the compilation process already has a time complexity of O(N) with respect to the number of variables.","category":"page"},{"location":"source_gen/","page":"Generating Sequential Code from BUGS Program","title":"Generating Sequential Code from BUGS Program","text":"It is worth pause here and give a summary:","category":"page"},{"location":"source_gen/","page":"Generating Sequential Code from BUGS Program","title":"Generating Sequential Code from BUGS Program","text":"To transform a BUGS program into a sequentially valid program, we will only apply two simple transformations, loop fission and statement reordering. These transformations will not need to modify loop bounds, renaming variables, adding any control flow, or make any changes to specific statements.","category":"page"},{"location":"source_gen/","page":"Generating Sequential Code from BUGS Program","title":"Generating Sequential Code from BUGS Program","text":"A program that can be transformed are determined by the following procedure:","category":"page"},{"location":"source_gen/","page":"Generating Sequential Code from BUGS Program","title":"Generating Sequential Code from BUGS Program","text":"First a statement dependence graph is computed.","category":"page"},{"location":"source_gen/","page":"Generating Sequential Code from BUGS Program","title":"Generating Sequential Code from BUGS Program","text":"If the statement dependence graph is acyclic, then we topologically sort the statements and fission all the loops to create a sequentially valid program.","category":"page"},{"location":"source_gen/","page":"Generating Sequential Code from BUGS Program","title":"Generating Sequential Code from BUGS Program","text":"In case the statement dependence graph is not acyclic. If the statements that form a cycle are all from the same loop (potentially at different nested levels), then we compute the dependence vectors to determine if the loop is sequentially valid. ","category":"page"},{"location":"source_gen/","page":"Generating Sequential Code from BUGS Program","title":"Generating Sequential Code from BUGS Program","text":"Otherwise, the program need to be rewritten.","category":"page"},{"location":"source_gen/","page":"Generating Sequential Code from BUGS Program","title":"Generating Sequential Code from BUGS Program","text":"We don't attempt to apply further transformations to the program, because it is a hard problem. We will use the following example to show why program transformations can be a difficult task. We will not attempt to implement the transformation demonstrated here.","category":"page"},{"location":"source_gen/","page":"Generating Sequential Code from BUGS Program","title":"Generating Sequential Code from BUGS Program","text":"Consider this model,","category":"page"},{"location":"source_gen/","page":"Generating Sequential Code from BUGS Program","title":"Generating Sequential Code from BUGS Program","text":"sumX[1] = x[1] # (S1)\n\n# Loop 1: for i in 2:N\nsumX[i] = sumX[i-1] + x[i] # (S2)\n# End Loop 1\n\n# Loop 2: for i in 1:N/2 (loop over even indices)\nx[2*i] ~ dnorm(sumX[2*i-1], tau) # (S3)\n# End Loop 2\n\n# Loop 3: for i in 1:N/2 (loop over odd indices)\nx[2*i + 1] ~ dgamma(sumX[2*i], tau) # (S4)\n# End Loop 3","category":"page"},{"location":"source_gen/","page":"Generating Sequential Code from BUGS Program","title":"Generating Sequential Code from BUGS Program","text":"the dependency graph is:","category":"page"},{"location":"source_gen/","page":"Generating Sequential Code from BUGS Program","title":"Generating Sequential Code from BUGS Program","text":"flowchart TD\n    S_input[\"(Input) x[1]\"] --> S1[\"(S1) sumX[1] = x[1]\"]\n\n    subgraph Loop1 [for i in 2:N]\n      S2[\"(S2) sumX[i] = sumX[i-1] + x[i]\"]\n    end\n\n    subgraph Loop2 [for i in 1:N/2 - Even Indices]\n      S3[\"(S3) x[2*i] ~ dnorm(sumX[2*i-1], tau)\"]\n    end\n\n    subgraph Loop3 [for i in 1:N/2 - Odd Indices]\n      S4[\"(S4) x[2*i + 1] ~ dgamma(sumX[2*i], tau)\"]\n    end\n\n    S1 --> S2\n    S2 -- loop-carried --> S2\n\n    S1 --> S3\n    S2 -- inter-loop --> S3\n    S2 -- inter-loop --> S4\n\n    S3 -- inter-loop --> S2\n    S4 -- inter-loop --> S2\n    \n    S3 -- inter-loop --> S4","category":"page"},{"location":"source_gen/","page":"Generating Sequential Code from BUGS Program","title":"Generating Sequential Code from BUGS Program","text":"This code exhibits a complex web of dependencies: S2 (calculating sumX) depends on x values. S3 (defining even xs) depends on odd sumX values. S4 (defining odd xs) depends on even sumX values. Critically, S2 needs both even and odd x values (calculated in S3 and S4 respectively) to calculate the sumX values that S3 and S4 themselves depend on. ","category":"page"},{"location":"source_gen/","page":"Generating Sequential Code from BUGS Program","title":"Generating Sequential Code from BUGS Program","text":"This creates a cyclical dependency across the three loops. To resolve this and make the code sequentially executable, a sophisticated transformation involving loop fusion and statement interleaving is required. All three loops need to be merged into a single loop structure that correctly orders the calculations within each logical iteration i (from 1 to N).","category":"page"},{"location":"source_gen/","page":"Generating Sequential Code from BUGS Program","title":"Generating Sequential Code from BUGS Program","text":"A possible (conceptual) fused structure might look like this:","category":"page"},{"location":"source_gen/","page":"Generating Sequential Code from BUGS Program","title":"Generating Sequential Code from BUGS Program","text":"sumX[1] = x[1] \n# Potentially handle x[2] separately depending on loop bounds/logic\nfor i = 2 to N # Or a similar loop structure covering all indices\n   if i is even:\n       # Calculate x[i] (originally S3) - needs sumX[i-1]\n       x[i] ~ dnorm(sumX[i-1], tau)\n   else: # i is odd\n       # Calculate x[i] (originally S4) - needs sumX[i-1]\n       x[i] ~ dgamma(sumX[i-1], tau) \n   \n   # Calculate sumX[i] (originally S2) - needs x[i] just calculated\n   sumX[i] = sumX[i-1] + x[i]\nend","category":"page"},{"location":"source_gen/","page":"Generating Sequential Code from BUGS Program","title":"Generating Sequential Code from BUGS Program","text":"Things can get even trickier when data are involved in computing the indices. For instance,","category":"page"},{"location":"source_gen/","page":"Generating Sequential Code from BUGS Program","title":"Generating Sequential Code from BUGS Program","text":"begin\n    z[2] = f(x[1]) # (S1)\n    y[2] = g(x[3]) # (S2)\n\n    for i in 1:3\n        x[i] = y[a[i]] + z[b[i]] # (S3)\n    end\nend\n\ndata = (a = [2, 3, 1], b = [3, 1, 2])","category":"page"},{"location":"source_gen/","page":"Generating Sequential Code from BUGS Program","title":"Generating Sequential Code from BUGS Program","text":"this results in the following dependencies between model variables","category":"page"},{"location":"source_gen/","page":"Generating Sequential Code from BUGS Program","title":"Generating Sequential Code from BUGS Program","text":"x[1] <- y[2], z[3]\nx[2] <- y[3], z[1]\nx[3] <- y[1], z[2]\nz[2] <- x[1]\ny[2] <- x[2]","category":"page"},{"location":"source_gen/","page":"Generating Sequential Code from BUGS Program","title":"Generating Sequential Code from BUGS Program","text":"with dependence graph","category":"page"},{"location":"source_gen/","page":"Generating Sequential Code from BUGS Program","title":"Generating Sequential Code from BUGS Program","text":"graph TD\n    y2 --> x1\n    z3 --> x1\n    z1 --> x2\n    y3 --> x2\n    y1 --> x3\n    z2 --> x3\n    x1 --> z2\n    x2 --> y2","category":"page"},{"location":"source_gen/","page":"Generating Sequential Code from BUGS Program","title":"Generating Sequential Code from BUGS Program","text":"The statement dependence graph of this program, on the other hand is (obtained by merging all the x nodes)","category":"page"},{"location":"source_gen/","page":"Generating Sequential Code from BUGS Program","title":"Generating Sequential Code from BUGS Program","text":"graph TD\n    S3 --> S1\n    S3 --> S2\n    S1 --> S3\n    S2 --> S3","category":"page"},{"location":"source_gen/","page":"Generating Sequential Code from BUGS Program","title":"Generating Sequential Code from BUGS Program","text":"This represents a worst case where we can't do much better than fully unrolling.","category":"page"},{"location":"source_gen/#Lowering-BUGS-programs-into-Julia-programs-that-compute-the-log-density","page":"Generating Sequential Code from BUGS Program","title":"Lowering BUGS programs into Julia programs that compute the log density","text":"","category":"section"},{"location":"source_gen/","page":"Generating Sequential Code from BUGS Program","title":"Generating Sequential Code from BUGS Program","text":"The Version 2 of Rats program is:","category":"page"},{"location":"source_gen/","page":"Generating Sequential Code from BUGS Program","title":"Generating Sequential Code from BUGS Program","text":"quote\n    var\"beta.tau\" ~ dgamma(0.001, 0.001)\n    var\"beta.c\" ~ dnorm(0.0, 1.0e-6)\n    var\"alpha.tau\" ~ dgamma(0.001, 0.001)\n    var\"alpha.c\" ~ dnorm(0.0, 1.0e-6)\n    alpha0 = var\"alpha.c\" - xbar * var\"beta.c\"\n    var\"tau.c\" ~ dgamma(0.001, 0.001)\n    sigma = 1 / sqrt(var\"tau.c\")\n    for i = 1:30\n        beta[i] ~ dnorm(var\"beta.c\", var\"beta.tau\")\n    end\n    for i = 1:30\n        alpha[i] ~ dnorm(var\"alpha.c\", var\"alpha.tau\")\n    end\n    for i = 1:30\n        for j = 1:5\n            mu[i, j] = alpha[i] + beta[i] * (x[j] - xbar)\n        end\n    end\n    for i = 1:30\n        for j = 1:5\n            Y[i, j] \\eqsim dnorm(mu[i, j], var\"tau.c\")\n        end\n    end\nend","category":"page"},{"location":"source_gen/","page":"Generating Sequential Code from BUGS Program","title":"Generating Sequential Code from BUGS Program","text":"We made a simple change to the program to prepare for lowering: we need to distinguish between observations and model parameters (because they correspond to different code). We introduce a new operator into the program \\eqsim to indicate that the left hand side is an observation.","category":"page"},{"location":"source_gen/#Handling-Mixed-Observations-and-Parameters","page":"Generating Sequential Code from BUGS Program","title":"Handling Mixed Observations and Parameters","text":"","category":"section"},{"location":"source_gen/","page":"Generating Sequential Code from BUGS Program","title":"Generating Sequential Code from BUGS Program","text":"BUGS supports mixing observations and model parameters for different elements of the same array variable. To support this, we introduce a guard to use conditional logic to decide what computation to do for different iteration of the same statement.","category":"page"},{"location":"source_gen/","page":"Generating Sequential Code from BUGS Program","title":"Generating Sequential Code from BUGS Program","text":"@bugs begin\n    for i in 1:2\n        for j in 1:5\n            x[i, j] ~ Normal()\n        end\n    end\nend\n\ndata = (x = [1 2 missing 4 5; 1 2 missing 4 5])","category":"page"},{"location":"source_gen/","page":"Generating Sequential Code from BUGS Program","title":"Generating Sequential Code from BUGS Program","text":"generated code:","category":"page"},{"location":"source_gen/","page":"Generating Sequential Code from BUGS Program","title":"Generating Sequential Code from BUGS Program","text":"begin\n    for i in 1:2\n        for j in 1:5\n            if i == 1 && j == 3 || i == 2 && j == 3\n                x[i, j] ~ Normal()\n            else\n                x[i, j] ≂ Normal()\n            end\n        end\n    end\nend","category":"page"},{"location":"source_gen/#Handling-Mixed-Data-Transformation-and-Deterministic-Assignments","page":"Generating Sequential Code from BUGS Program","title":"Handling Mixed Data Transformation and Deterministic Assignments","text":"","category":"section"},{"location":"source_gen/","page":"Generating Sequential Code from BUGS Program","title":"Generating Sequential Code from BUGS Program","text":"For instance","category":"page"},{"location":"source_gen/","page":"Generating Sequential Code from BUGS Program","title":"Generating Sequential Code from BUGS Program","text":"for i in 1:5\n    x[i] = y[i] + 1\nend","category":"page"},{"location":"source_gen/","page":"Generating Sequential Code from BUGS Program","title":"Generating Sequential Code from BUGS Program","text":"if the data is","category":"page"},{"location":"source_gen/","page":"Generating Sequential Code from BUGS Program","title":"Generating Sequential Code from BUGS Program","text":"y = [1, 2, missing, missing, 2]","category":"page"},{"location":"source_gen/","page":"Generating Sequential Code from BUGS Program","title":"Generating Sequential Code from BUGS Program","text":"this is generally allowed in BUGS.","category":"page"},{"location":"source_gen/","page":"Generating Sequential Code from BUGS Program","title":"Generating Sequential Code from BUGS Program","text":"x[1], x[2], x[5] can be computed at compile time, so these are \"transformed data\". x[3], x[4] need to be computed at evaluation time. And only x[3] and x[4] are in the compiled graph.","category":"page"},{"location":"source_gen/","page":"Generating Sequential Code from BUGS Program","title":"Generating Sequential Code from BUGS Program","text":"For generated Julia program, if a statement can be eliminated because all the variables stemmed from this statement are \"transformed data\". While in the above case, where a statements corresponds to both transformed data and deterministic variables. It will be left in the generated program as is. In this case, there will be redundant computation.","category":"page"},{"location":"example/#Example:-Logistic-Regression-with-Random-Effects","page":"Example","title":"Example: Logistic Regression with Random Effects","text":"","category":"section"},{"location":"example/","page":"Example","title":"Example","text":"using JuliaBUGS\n\ndata = (\n    r = [10, 23, 23, 26, 17, 5, 53, 55, 32, 46, 10, 8, 10, 8, 23, 0, 3, 22, 15, 32, 3],\n    n = [39, 62, 81, 51, 39, 6, 74, 72, 51, 79, 13, 16, 30, 28, 45, 4, 12, 41, 30, 51, 7],\n    x1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n    x2 = [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1],\n    N = 21,\n)\n\nmodel_def = @bugs begin\n    for i in 1:N\n        r[i] ~ dbin(p[i], n[i])\n        b[i] ~ dnorm(0.0, tau)\n        p[i] = logistic(alpha0 + alpha1 * x1[i] + alpha2 * x2[i] + alpha12 * x1[i] * x2[i] + b[i])\n    end\n    alpha0 ~ dnorm(0.0, 1.0E-6)\n    alpha1 ~ dnorm(0.0, 1.0E-6)\n    alpha2 ~ dnorm(0.0, 1.0E-6)\n    alpha12 ~ dnorm(0.0, 1.0E-6)\n    tau ~ dgamma(0.001, 0.001)\n    sigma = 1 / sqrt(tau)\nend\n\ninitializations = (alpha = 1, beta = 1)","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"We will use the Seeds for demonstration. This example concerns the proportion of seeds that germinated on each of 21 plates. Here, we transform the data into a NamedTuple:","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"data = (\n    r = [10, 23, 23, 26, 17, 5, 53, 55, 32, 46, 10, 8, 10, 8, 23, 0, 3, 22, 15, 32, 3],\n    n = [39, 62, 81, 51, 39, 6, 74, 72, 51, 79, 13, 16, 30, 28, 45, 4, 12, 41, 30, 51, 7],\n    x1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n    x2 = [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1],\n    N = 21,\n)","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"where r[i] is the number of germinated seeds and n[i] is the total number of the seeds on the i-th plate. Let p_i be the probability of germination on the i-th plate. Then, the model is defined by:","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"beginaligned\nb_i sim textNormal(0 tau) \ntextlogit(p_i) = alpha_0 + alpha_1 x_1 i + alpha_2 x_2i + alpha_12 x_1i x_2i + b_i \nr_i sim textBinomial(p_i n_i)\nendaligned","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"where x_1i and x_2i are the seed type and root extract of the i-th plate.   The original BUGS program for the model is:","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"model\n{\n    for( i in 1 : N ) {\n        r[i] ~ dbin(p[i],n[i])\n        b[i] ~ dnorm(0.0,tau)\n        logit(p[i]) <- alpha0 + alpha1 * x1[i] + alpha2 * x2[i] +\n        alpha12 * x1[i] * x2[i] + b[i]\n    }\n    alpha0 ~ dnorm(0.0, 1.0E-6)\n    alpha1 ~ dnorm(0.0, 1.0E-6)\n    alpha2 ~ dnorm(0.0, 1.0E-6)\n    alpha12 ~ dnorm(0.0, 1.0E-6)\n    tau ~ dgamma(0.001, 0.001)\n    sigma <- 1 / sqrt(tau)\n}","category":"page"},{"location":"example/#Modeling-Language","page":"Example","title":"Modeling Language","text":"","category":"section"},{"location":"example/#Writing-a-Model-in-BUGS","page":"Example","title":"Writing a Model in BUGS","text":"","category":"section"},{"location":"example/","page":"Example","title":"Example","text":"Language References:","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"MultiBUGS\nOpenBUGS","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"Implementations in C++ and R:","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"JAGS and its user manual\nNimble","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"Language Syntax:","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"BNF","category":"page"},{"location":"example/#Writing-a-Model-in-Julia","page":"Example","title":"Writing a Model in Julia","text":"","category":"section"},{"location":"example/","page":"Example","title":"Example","text":"We provide a macro which allows users to write down model definitions using Julia:","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"model_def = @bugs begin\n    for i in 1:N\n        r[i] ~ dbin(p[i], n[i])\n        b[i] ~ dnorm(0.0, tau)\n        p[i] = logistic(alpha0 + alpha1 * x1[i] + alpha2 * x2[i] + alpha12 * x1[i] * x2[i] + b[i])\n    end\n    alpha0 ~ dnorm(0.0, 1.0E-6)\n    alpha1 ~ dnorm(0.0, 1.0E-6)\n    alpha2 ~ dnorm(0.0, 1.0E-6)\n    alpha12 ~ dnorm(0.0, 1.0E-6)\n    tau ~ dgamma(0.001, 0.001)\n    sigma = 1 / sqrt(tau)\nend","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"BUGS syntax carries over almost one-to-one to Julia, with minor exceptions. Modifications required are minor: curly braces are replaced with begin ... end blocks, and for loops do not require parentheses. In addition, Julia uses f(x) = ... as a shorthand for function definition, so BUGS' link function syntax is disallowed. Instead, user can call the inverse function of the link functions on the RHS expressions.","category":"page"},{"location":"example/#Support-for-Legacy-BUGS-Programs","page":"Example","title":"Support for Legacy BUGS Programs","text":"","category":"section"},{"location":"example/","page":"Example","title":"Example","text":"The @bugs macro also works with original (R-like) BUGS syntax:","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"model_def = @bugs(\"\"\"\nmodel{\n    for( i in 1 : N ) {\n        r[i] ~ dbin(p[i],n[i])\n        b[i] ~ dnorm(0.0,tau)\n        logit(p[i]) <- alpha0 + alpha1 * x1[i] + alpha2 * x2[i] +\n        alpha12 * x1[i] * x2[i] + b[i]\n    }\n    alpha0 ~ dnorm(0.0,1.0E-6)\n    alpha1 ~ dnorm(0.0,1.0E-6)\n    alpha2 ~ dnorm(0.0,1.0E-6)\n    alpha12 ~ dnorm(0.0,1.0E-6)\n    tau ~ dgamma(0.001,0.001)\n    sigma <- 1 / sqrt(tau)\n}\n\"\"\", true, true)","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"By default, @bugs will translate R-style variable names like a.b.c to a_b_c, user can pass false as the second argument to disable this. User can also pass true as the third argument if model { } enclosure is not present in the BUGS program. We still encourage users to write new programs using the Julia-native syntax, because of better debuggability and perks like syntax highlighting.","category":"page"},{"location":"example/#Basic-Workflow","page":"Example","title":"Basic Workflow","text":"","category":"section"},{"location":"example/#Compilation","page":"Example","title":"Compilation","text":"","category":"section"},{"location":"example/","page":"Example","title":"Example","text":"Model definition and data are the two necessary inputs for compilation, with optional initializations. The compile function creates a BUGSModel that implements the LogDensityProblems.jl interface.","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"compile(model_def::Expr, data::NamedTuple)","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"And with initializations:","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"compile(model_def::Expr, data::NamedTuple, initializations::NamedTuple)","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"Using the model definition and data we defined earlier, we can compile the model:","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"model = compile(model_def, data)\nshow(model) # hide","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"Parameter values will be sampled from the prior distributions in the original space.","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"We can provide initializations:","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"initializations = (alpha = 1, beta = 1)","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"compile(model_def, data, initializations)","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"We can also initialize parameters after compilation:","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"initialize!(model, initializations)","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"initialize! also accepts a flat vector. In this case, the vector should have the same length as the number of parameters, but values can be in transformed space:","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"initialize!(model, rand(26))","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"LogDensityProblemsAD.jl defined some extensions that support automatic differentiation packages. For example, with ReverseDiff.jl","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"using LogDensityProblemsAD, ReverseDiff\n\nad_model = ADgradient(:ReverseDiff, model; compile=Val(true))","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"Here ad_model will also implement all the interfaces of LogDensityProblems.jl. LogDensityProblemsAD.jl will automatically add the interface function logdensity_and_gradient to the model, which will return the log density and gradient of the model.   And ad_model can be used in the same way as model in the example below.","category":"page"},{"location":"example/#Inference","page":"Example","title":"Inference","text":"","category":"section"},{"location":"example/","page":"Example","title":"Example","text":"For a differentiable model, we can use AdvancedHMC.jl to perform inference. For instance,","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"using AdvancedHMC, AbstractMCMC, LogDensityProblems, MCMCChains\n\nn_samples, n_adapts = 2000, 1000\n\nD = LogDensityProblems.dimension(model); initial_θ = rand(D)\n\nsamples_and_stats = AbstractMCMC.sample(\n                        ad_model,\n                        NUTS(0.8),\n                        n_samples;\n                        chain_type = Chains,\n                        n_adapts = n_adapts,\n                        init_params = initial_θ,\n                        discard_initial = n_adapts\n                    )","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"This will return the MCMC Chain,","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"Chains MCMC chain (2000×40×1 Array{Real, 3}):\n\nIterations        = 1001:1:3000\nNumber of chains  = 1\nSamples per chain = 2000\nparameters        = alpha0, alpha12, alpha1, alpha2, tau, b[16], b[12], b[10], b[14], b[13], b[7], b[6], b[20], b[1], b[4], b[5], b[2], b[18], b[8], b[3], b[9], b[21], b[17], b[15], b[11], b[19], sigma\ninternals         = lp, n_steps, is_accept, acceptance_rate, log_density, hamiltonian_energy, hamiltonian_energy_error, max_hamiltonian_energy_error, tree_depth, numerical_error, step_size, nom_step_size, is_adapt\n\nSummary Statistics\n  parameters      mean       std      mcse    ess_bulk    ess_tail      rhat   ess_per_sec \n      Symbol   Float64   Float64   Float64        Real     Float64   Float64       Missing \n\n      alpha0   -0.5642    0.2320    0.0084    766.9305   1022.5211    1.0021       missing\n     alpha12   -0.8489    0.5247    0.0170    946.0418   1044.1109    1.0002       missing\n      alpha1    0.0587    0.3715    0.0119    966.4367   1233.2257    1.0007       missing\n      alpha2    1.3852    0.3410    0.0127    712.2978    974.1566    1.0002       missing\n         tau    1.8880    0.7705    0.0447    348.9331    338.3655    1.0030       missing\n       b[16]   -0.2445    0.4459    0.0132   1528.0578    843.8225    1.0003       missing\n       b[12]    0.2050    0.3602    0.0086   1868.6126   1202.1363    0.9996       missing\n       b[10]   -0.3500    0.2893    0.0090   1047.3119   1245.9358    1.0008       missing\n      ⋮           ⋮         ⋮         ⋮          ⋮           ⋮          ⋮           ⋮\n                                                                             19 rows omitted\n\nQuantiles\n  parameters      2.5%     25.0%     50.0%     75.0%     97.5% \n      Symbol   Float64   Float64   Float64   Float64   Float64 \n\n      alpha0   -1.0143   -0.7143   -0.5590   -0.4100   -0.1185\n     alpha12   -1.9063   -1.1812   -0.8296   -0.5153    0.1521\n      alpha1   -0.6550   -0.1822    0.0512    0.2885    0.8180\n      alpha2    0.7214    1.1663    1.3782    1.5998    2.0986\n         tau    0.5461    1.3941    1.8353    2.3115    3.6225\n       b[16]   -1.2359   -0.4836   -0.1909    0.0345    0.5070\n       b[12]   -0.4493   -0.0370    0.1910    0.4375    0.9828\n       b[10]   -0.9570   -0.5264   -0.3331   -0.1514    0.1613\n      ⋮           ⋮         ⋮         ⋮         ⋮         ⋮\n                                                 19 rows omitted\n","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"This is consistent with the result in the OpenBUGS seeds example.","category":"page"},{"location":"example/#Parallel-and-Distributed-Sampling-with-AbstractMCMC","page":"Example","title":"Parallel and Distributed Sampling with AbstractMCMC","text":"","category":"section"},{"location":"example/","page":"Example","title":"Example","text":"AbstractMCMC and AdvancedHMC support both parallel and distributed sampling.","category":"page"},{"location":"example/#Parallel-Sampling","page":"Example","title":"Parallel Sampling","text":"","category":"section"},{"location":"example/","page":"Example","title":"Example","text":"To perform multi-threaded sampling of multiple chains, start the Julia session with the -t <n_threads> argument. The model compilation code remains the same, and we can sample multiple chains in parallel as follows:","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"n_chains = 4\nsamples_and_stats = AbstractMCMC.sample(\n    ad_model,\n    AdvancedHMC.NUTS(0.65),\n    AbstractMCMC.MCMCThreads(),\n    n_samples,\n    n_chains;\n    chain_type = Chains,\n    n_adapts = n_adapts,\n    init_params = [initial_θ for _ = 1:n_chains],\n    discard_initial = n_adapts,\n)","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"In this case, we pass two additional arguments to AbstractMCMC.sample:","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"AbstractMCMC.MCMCThreads(): the sampler type, and\nn_chains: the number of chains to sample.","category":"page"},{"location":"example/#Distributed-Sampling","page":"Example","title":"Distributed Sampling","text":"","category":"section"},{"location":"example/","page":"Example","title":"Example","text":"To perform distributed sampling of multiple chains, start the Julia session with the -p <n_processes> argument.","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"In distributed mode, ensure that all functions and modules are available on all processes. Use @everywhere to make the functions and modules available on all processes.","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"For example:","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"@everywhere begin\n    using JuliaBUGS, LogDensityProblems, LogDensityProblemsAD, AbstractMCMC, AdvancedHMC, MCMCChains, ReverseDiff # also other packages one may need\n\n    # Define the functions to use\n    # Use `@register_primitive` to register the functions to use in the model\n\n    # Distributed can handle data dependencies in some cases, for more detail, see https://docs.julialang.org/en/v1/manual/distributed-computing/\n\nend\n\nn_chains = nprocs() - 1 # use all the processes except the parent process\nsamples_and_stats = AbstractMCMC.sample(\n    ad_model,\n    AdvancedHMC.NUTS(0.65),\n    AbstractMCMC.MCMCDistributed(),\n    n_samples,\n    n_chains;\n    chain_type = Chains,\n    n_adapts = n_adapts,\n    init_params = [initial_θ for _ = 1:n_chains], # each chain has its own initial parameters\n    discard_initial = n_adapts,\n    progress = false, # Base.TTY creating problems in distributed setting\n)","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"In this case, we pass two additional arguments to AbstractMCMC.sample:","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"AbstractMCMC.MCMCDistributed(): the sampler type, and\nn_chains: the number of chains to sample.","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"Note that the init_params argument is now a vector of initial parameters for each chain. Sometimes the progress logger can cause problems in distributed setting, so we can disable it by setting progress = false.","category":"page"},{"location":"example/#More-Examples","page":"Example","title":"More Examples","text":"","category":"section"},{"location":"example/","page":"Example","title":"Example","text":"We have transcribed all the examples from the first volume of the BUGS Examples (original and transcribed). All programs and data are included, and can be compiled using the steps described in the tutorial above.","category":"page"}]
}
